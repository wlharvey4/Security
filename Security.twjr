\input texinfo   @c -*- mode: texinfo -*-

@c *****************************************************************************
@c %**start of header (This is for running Texinfo on a region.)

@setfilename  Security.info
@settitle     Security Information

@c %**end of header (This is for running Texinfo on a region.)
@c *****************************************************************************

@c VERSION 0.0.4
@c DATE    2018-10-31T13:25

@c -----------------------------------------------------------------------------
@set TITLE      Security Information
@set SHORTTITLE Security
@set EDITION 0.1
@set UPDATE-MONTH OCTOBER, 2018 @c goes in the subtitle
@set COPYRIGHT-YEAR 2018
@set AUTHOR WLHarvey4
@set ADDRESS1 Address Line 1
@set ADDRESS2 Address Line 2
@c -----------------------------------------------------------------------------




@c *****************************************************************************
@c BIBCITE
@c *****************************************************************************

@c need to load macros before header
@macro mybibsetrefnode{node}
@set mybibrefnode \node\
@end macro

@macro mybibnode{}
@value{mybibrefnode}
@end macro

@macro mybibusetable{node}
@set mybibtable true
@ifset mybiblist
@clear mybiblist
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibuselist{node}
@set mybiblist true
@ifset mybibtable
@clear mybibtable
@end ifset
@mybibsetrefnode{\node\}
@end macro

@macro mybibcite{ref}
@inlineifclear{mybibrefnode, @mybibmakeref{mybibsetrefnode was not used, \ref\}}
@ifset mybibrefnode
@mybibmakeref{@mybibnode{}, \ref\}
@end ifset

@end macro

@macro mybibmakeref{node, ref}
(See item @cite{\ref\} in @ref{\ref\,,\node\}.)
@end macro

@macro mybibitem{ref}
@ifclear mybiblist
@ifclear mybibtable
@set mybiblist true
@end ifclear
@end ifclear

@ifset mybiblist
@item
@anchor{\ref\}[\ref\]
@end ifset

@ifset mybibtable
@item @anchor{\ref\}\ref\ ---
@end ifset

@end macro

@mybibusetable{Bibliography}

@c /////////////////////////////////////////////////////////////////////////////








@c *****************************************************************************
@c FINALOUT / DRAFT / FORPRINT
@c *****************************************************************************

@set      DRAFT @i{DRAFT} @c when set, print DRAFT in heading
@c @clear DRAFT  @c when clear, don't print DRAFT in heading
@clear  FINALOUT @c when clear, show black boxes for overfull lines
@c @set FINALOUT @c when set, don't show black boxes for overfull lines
@clear  FORPRINT @c when clear, PDF output is for viewing, not printing
@c @set FORPRINT @c when set, PDF output is for printing, not viewing

@c -----------------------------------------------------------------------------
@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@iftex
@ifset FINALOUT @c don't show black boxes for final printout
@finalout
@end ifset
@end iftex

@c Uncomment this for the release.  Leaving it off saves paper
@c during editing and review.
@ifset FORPRINT
@ifset FINALOUT
@c @setchapternewpage odd
@end ifset
@end ifset

@c -----------------------------------------------------------------------------




@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook




@c *****************************************************************************
@c SPECIAL TEXIWEBJR COMMANDS
@c *****************************************************************************

@c Change how xref titles are quoted.
@dquotexrefs
@c And let braces in index entries work.
@allowindexbraces

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex











@c *****************************************************************************
@c INDEX COMMANDS
@c *****************************************************************************(

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml




@c *****************************************************************************
@copying
@c *****************************************************************************

@ -----------------------------------------------------------------------------
@docbook
<para>Published by:</para>

<literallayout class="normal">Full Name
Address Line 1
Address Line 2
etc.
Email: <email>user@@example.com</email>
URL: <ulink url="http://www.example.com/">http://www.example.com/</ulink></literallayout>

<literallayout class="normal">Copyright &copy; YYYY, YYYY
Full name here
All Rights Reserved.</literallayout>
@end docbook
@c -----------------------------------------------------------------------------


@c -----------------------------------------------------------------------------
@ifnotdocbook
Copyright @copyright{} @value{COPYRIGHT-YEAR} @*
@value{AUTHOR} @*
All Rights Reserved.
@end ifnotdocbook
@c -----------------------------------------------------------------------------


@sp 1
The SECURITY program is copyright
@copyright{} @value{COPYRIGHT-YEAR} by @value{AUTHOR}. It is published under
the conditions of the GNU General Public License, version 3.
@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.

@end copying
@c /////////////////////////////////////////////////////////////////////////////




@c =============================================================================
@titlepage
@c =============================================================================

@c Uncomment this if it's ever printed as a real book(let).
@c @shorttitlepage @value{SHORTTITLE}

@title @value{TITLE}
@subtitle @value{UPDATE-MONTH}
@author @value{AUTHOR} @c Full Name here

@ifnotdocbook
@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
Published by:
@sp 1
@value{AUTHOR} @*
@value{ADDRESS1} @*
@value{ADDRESS2} @*
@* @c etc.
Email: @EMAIL{user@@example.com,user AT example.com} @*
URL: @url{http://www.example.com/} @*

@insertcopying
@end ifnotdocbook

@end titlepage
@c /////////////////////////////////////////////////////////////////////////////



@c *****************************************************************************
@c HEADINGS
@c *****************************************************************************

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex








@c #############################################################################
@c BEGIN
@c #############################################################################








@ifnottex
@ifnotdocbook
@ifnotxml

@c =============================================================================
@node Top
@top Security
@c =============================================================================

@c Preface node should come right after the Top
@c node, in `unnumbered' sections, then the introductory chapter.
@c Licensing nodes are appendices, they're not central to TexiWebJr.

This file documents FOO, a program that does WHATEVER.

@insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex




@c =============================================================================
@menu
@detailmenu
@end detailmenu
@end menu
@c =============================================================================




@c =============================================================================
@c @summarycontents
@contents
@c =============================================================================








@c *****************************************************************************

@c Add these to the menu if they ever get included.
@c @node Foreword
@c @unnumbered Foreword








@c *****************************************************************************

@node Preface
@unnumbered Preface

Text here.

@menu
* Audience::                    Who should read this @value{DOCUMENT}.
* Overview::                    An overview of the @value{DOCUMENT}.
* Conventions::                 Typographical conventions.
* Acknowledgements::            Acknowledgements.
@end menu




@c -----------------------------------------------------------------------------
@node Audience
@unnumberedsec Intended Audience

Audience text here.




@c -----------------------------------------------------------------------------
@node Overview
@unnumberedsec What Is Covered

Overview text and chapter by chapter description here.




@c -----------------------------------------------------------------------------
@node Conventions
@unnumberedsec Typographical Conventions

@c Copied mostly verbatim from the gawk manual.

@cindex Texinfo document formatting language
This @value{DOCUMENT} is written in an enhanced version of
@uref{http://www.gnu.org/software/texinfo/, Texinfo},
the GNU documentation formatting language.
A single Texinfo source file is used to produce both the printed and online
versions of a program's documentation.
@ifnotinfo
Because of this, the typographical conventions
are slightly different than in other books you may have read.
@end ifnotinfo

Examples you would type at the command-line are preceded by the common
shell primary and secondary prompts, @samp{$} and @samp{>}.  Input that
you type is shown @kbd{like this}.  Output from the command is preceded
by the glyph ``@print{}''.  This typically represents the command's
standard output.  Error messages, and other output on the command's
standard error, are preceded by the glyph ``@error{}''.  For example:

@example
$ @kbd{echo hi on stdout}
@print{} hi on stdout
$ @kbd{echo hello on stderr 1>&2}
@error{} hello on stderr
@end example

@ifnotinfo
In the text, command names appear in @code{this font}, while code segments
appear in the same font and quoted, @samp{like this}.  Options look
like this: @option{-f}.  Some things are emphasized @emph{like this},
and if a point needs to be made strongly, it is done @strong{like this}.
The first occurrence of a new term is usually its @dfn{definition} and
appears in the same font as the previous occurrence of ``definition''
in this sentence.  Finally, file names are indicated like this:
@file{/path/to/our/file}.
@end ifnotinfo




@c -----------------------------------------------------------------------------
@node Acknowledgements
@unnumberedsec Acknowledgements

Acknowledgements go here.




@c /////////////////////////////////////////////////////////////////////////////
@c END Preface








@c *****************************************************************************
@node Introduction
@chapter Introduction








@c *****************************************************************************

@node JSON Web Tokens
@chapter JSON Web Tokens
@cindex JSON web tokens




@c -----------------------------------------------------------------------------

@node JSON Web Tokens By Auth0
@section JSON Web Tokens By Auth0
@cindex Auth0

@heading About This Site

@url{https://jwt.io,JWT.IO} allows you to decode, verify and generate JWT.

@heading About JWT's
@cindex JSON web tokens, definition

@dfn{JSON  Web Tokens}  are  an open,  industry standard  RFC  7519 method  for
@emph{representing claims securely between two parties}.


@c .....................................

@node Introduction to JSON Web Tokens
@subsection Introduction to JSON Web Tokens
@cindex JSON web tokens introduction

@heading About This Information

This information is  extracted from the article @cite{Introduction  to JSON Web
Tokens}.  @mybibcite{JWT-INTRO}



@c -----------------------------------------------------------------------------

@node Understanding JSON Web Token Authentication
@section Understanding JSON Web Token Authentication

@heading About
@cindex @cite{Understanding JSON Web Token Authentication}
@cindex Rajat S, author

This information is derived from
@cite{Understanding  JSON Web Token Authentication}.  @mybibcite{JWT}

This article first  describes what a JSON  Web Token is (@pxref{What  Is A JSON
Web Token}), and then creates a web server  that works with a JSON Web Token to
log a user in (and keep unauthorized users out).


@c .....................................

@node What Is A JSON Web Token
@subsection What Is A JSON Web Token?
@cindex JSON web token, definition
@cindex JWT

@heading JSON Web Token

A @dfn{JSON  Web Token  (JWT}) is  a safe, compact,  and self-contained  way of
transmitting information between multiple parties in the form of a JSON object.

What is a JSON Web Token used for?

@subheading Scenario
@cindex JSON web token scenario

Say you want to  log in to an app, Tinder for example.   Tinder allows users to
log in using their  Facebook profile.  So when you select the  option to log in
using  Facebook, the  app contacts  Facebook’s Authentication  server with  the
user’s credentials (username and password).

Once the Authentication server verifies  the user’s credentials, it will create
a JWT and send it  to the user.  The app now gets this  JWT and allows the user
access to its data.


@c .....................................

@node JWT Structure
@subsection JWT Structure
@cindex JWT structure

@heading Structure of a JSON Web Token

A JSON  Web Token consists  of three parts that  are separated by  a @emph{dot}
(@kbd{.}).

@enumerate
@cindex header
@item
Header

The @dfn{header} typically  consists of two parts: 

@enumerate
@cindex token type
@item
the token’s  @emph{type}, and
@cindex hashing algorithm
@item
the @emph{hashing algorithm} that is being used.
@example
@{
  "alg": "HS256",
  "typ": "JWT"
@}
@end example

@end enumerate

@cindex payload
@item
Payload

The  @dfn{payload} is  where the  actual information  that we  want to  send is
stored. Here is an  example of a simple payload.  Know that  payloads can be way
more complicated than this to ensure better security.
@example
@{
  "sub": "65165751325",
  "name": "Rajat S",
  "admin": true
@}
@end example

@cindex signature
@cindex private keys
@cindex keys
@item
Signature

The @dfn{signature} is  used to verify that the message  was not altered before
reaching its destination.  This is usually done by using private keys.
@end enumerate

@heading Encoding

@cindex Base64-URI
These three parts are usually  encoded into three @dfn{Base64-URI} strings that
are separated by a dot (@kbd{.}).

To easily  decode, verify, generate, or  just play around with  JWTs, check out
the @file{JWT.IO Debugger} by Auth0.
@cindex @file{JWT.IO Debugger}
@cindex jwt.io
@cindex Auth0

@itemize
@item
@url{https://jwt.io/, JWT.IO} by Auth0
@end itemize


@c .....................................

@node Create a Basic Express Server
@subsection Create a Basic Express Server
@cindex server, express
@cindex express server, create
@cindex create express server

@heading An Express Server

Now that we have  a basic understanding of what a JSON Web  Token is, lets look
at how to build a simple authentication server that will issue a JSON Web Token
(JWT), which  we will then use  to access an API.   We will do this  in phases,
first creating a  simple server, then looping back to  add login functionality,
and then again to create authentication functionality.

@heading The Process

@subheading Install Express and Dependencies

We  will first  implement a  simple server  using the  Node Express  framework.
Therefore,  we  will need  to  install  the  @file{express} library,  and  some
dependencies that @file{express} will need  to do its server and authentication
work.  We will  use @command{yarn} to do the installations,  but you could just
as well use @command{npm}.

@subheading Implement a Basic Server

Then we will create a server  application in a file called @file{index.js} that
lives  inside  a  folder  called @file{jwt-auth-server}.   The  server's  basic
functionality (its API) will  be to return the current date  and time using the
route  @code{/time}.  The  current  date and  time will  be  obtained from  the
JavaScript @file{Date}  class.  Therefore, our server  application will contain
some routes and associated route  handlers, including a ``catch-all'' route and
handler.

@itemize @result
@item
@code{/time}
@item
@code{*}
@end itemize

@heading Makefile Target @file{jwt-auth-demo}

You  can install  the Express  server and  dependencies by  typing the  command
@command{make jwt-auth-demo} from the command-line  at your project root.  This
command will create  the necessary directory structure in  your current working
directory and  install the  @file{express} framework  and all  dependencies, as
described below.  The project will be installed into @file{JWT-Auth-Demo}.  The
server application  directory, @file{jwt-auth-server},  is also  created inside
@file{JWT-Auth-Demo} at this time.

Again,  make  sure  you  are  in an  appropriate  working  directory,  as  this
@command{make} command will install the project in @file{JWT-Auth_Demo} in your
current  directory.   Node's  @file{package.json}  file will  be  added  inside
@file{JWT-Auth-Demo}, and  the @file{express} library and  dependencies will go
into @file{node_modules}.

@subheading Makefile JWT Express Server Skeleton

The @file{Makefile}  target is created here,  and will be fully  implemented in
the next sections.

@<Makefile---Applications@>=
# JWT EXPRESS SERVER
# ##################

@<Makefile---Applications--JWT-Auth-Demo@>

@

@c _____________________________________

@node Express and Dependencies
@subsubsection Express and Dependencies

@heading Express and Dependencies

First, we install  @file{express}.  While No dependencies are  necessary to run
the basic server, I  am going to install all dependencies  that the server will
eventually  need  at  this  point  to  simplify  the  process.   The  necessary
dependencies  for  login  and  authentication  work will  be  utilized  in  the
following iterations.

@enumerate
@item @file{express}

@example
$ yarn add express
@end example

@item
@file{jsonwebtoken}

@example
$ yarn add jsonwebtoken
@end example

@item
@file{cors}

@example
$ yarn add cors
@end example

@item
@file{express-jwt}

@example
$ yarn add express-jwt
@end example

@end enumerate

@heading Implement a Basic Express Server

Next, create  a new  server folder.   The server code  will live  inside.  This
folder can  be named  anything you like,  but it should  be descriptive  of its
contents.   I  will use  the  name  @file{jwt-auth-server}  After it  has  been
created, move into it to prepare to create the file @file{index.js}.

@example
$ mkdir jwt-auth-server
$ cd jwt-auth-server
$ touch index.js
@end example

@heading Makefile Express Server Rule

This code, inside  the Makefile under the  target @code{jwt-auth-demo}, creates
the directory structure and installs  @file{express} and its dependencies using
@command{yarn}.     Note    that     the    server    application    directory,
@file{jwt-auth-server}, is created via the @command{mkdir -p} command.

@<Makefile---Applications--JWT-Auth-Demo@>=

PWD := $$PWD
JWT-EXPRESS-SERVER-ROOT := $(PWD)/JWT-Auth-Demo
JWT-AUTH-SERVER := jwt-auth-server
JWT-EXPRESS-SERVER := $(JWT-EXPRESS-SERVER-ROOT)/$(JWT-AUTH-SERVER)

DEPS := express jsonwebtoken cors express-jwt

.PHONY : jwt-auth-demo
jwt-auth-demo : $(JWT-EXPRESS-SERVER)
$(JWT-EXPRESS-SERVER) :
	mkdir -p $(JWT-EXPRESS-SERVER); \
	cd $(JWT-EXPRESS-SERVER-ROOT);  \
	yarn add $(DEPS)
	  
@

@c _____________________________________

@node Express Server Code
@subsubsection Express Server Code

@heading The Server Sections

The basic server implementation contains three major sections:

@enumerate
@item
Dependencies

Import dependency libraries using @code{require}:

@itemize
@item
@file{express}

@verbatim
const express = require("express");
@end verbatim
@end itemize

@item
The Server

The   server   is   created    by   executing   the   @code{express}   function
(@samp{express()}.  The server needs to connect to a port, so decide upon which
port you want to  use, and place that into a  variable called @code{PORT}.  The
server is started by sending it the  @code{listen} message and giving it a port
assignment:

@verbatim
const app = express();
const PORT = 8888;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}.`); 
});
@end verbatim

@item
Route Handlers

@itemize @result
@item
@file{/time}

This  code creates  a  route handler  for @code{/time}  (@samp{app.get('/time',
@var{cb})}).  The handler  gets the current time as  an object from
the   JavaScript   @file{Date}   class    (@samp{new   Date()}),   formats   it
(@samp{.toLocaleTime()}), and  then sends it  to the requesting  client browser
(@samp{res.status(@var{status}).send(@var{response})}).

@verbatim
app.get('/time', (req, res) => {
  const time = (new Date()).toLocaleTimeString();
  res.status(200).send(`The Time is ${time}`);
});
@end verbatim

@item
@code{*} (``catch-all'')

Also add a  ``catch-all'' route to handle  any request to any  route other than
@code{/time}; in  this handler, the server  will send a 404  error message.  To
implement this handler,  write the following code into our  server; notice that
the    server    responds    with    a    different    command    this    time:
@samp{res.sendStatus(@var{status})},  one that  sends only  a status  without a
response:

@verbatim
app.get("*", (req, res) => {
  res.sendStatus(404);
});
@end verbatim
@end itemize

@end enumerate

@c _____________________________________

@node Start the Server
@subsubsection Start the Server

With that  done, we  can start the  server by typing  @command{node .}   in our
command terminal.  Then, go to @file{localhost:8888}  and you will find that it
displays a @samp{Not  Found} message.  Add @file{/time} to the  URL and it will
display the local time as shown below:

@float Image,img:time
@image{resources/time,,Time Image}
@caption{Server Time}
@end float

In short, we  have built an @file{express}  server that will show  us the local
time at @code{/time} and a 404 error on any other route.


@c .....................................

@node Implement A Login Route
@subsection Implement A Login Route
@cindex login route, implement

Let’s implement a route called @file{login}.  Unlike the routes in the previous
sections, which used  @code{get} and @code{listen}, this route  will be created
using @code{post}.

@subheading Login Route

@example
app.post("/login", (req, res) => @{
  const user = req.body.username;
  res.status(200).send(`User's name is $@{user@}`);
@})
@end example

But currently our server cannot read the  body of the requests.  To solve this,
we will install a new middleware library called @file{body-parser}.

@example
$ yarn install body-parser
@end example

Then  just like  we did  with the  @file{express} library,  import it  into the
@file{index.js} file using the @code{require} syntax.

@example
const bodyParser = require("body-parser");
@end example

We can now tell @file{express} to use @file{body-parser} to handle all the JSON
responses as shown below:

@example
app.use(bodyParser.json());
@end example

Now start the server by running the @command{node .} command.

In order, to  test this new route,  we will need to use  POSTMAN.  Install this
into  your system,  if you  don’t already  have it.   Inside POSTMAN,  create a
@code{post} request to the login route as shown below:

@float Image,img:post
@image{resources/post,,,Post}
@caption{Postman Post}
@end float

Inside the body, create a JSON Object as shown below:

@float Image,img:object
@image{resources/object,,,Object}
@caption{Postman Body Object}
@end float

Clicking on send should get you the following response:

@float Image,img:response
@image{resources/response,,,Response}
@caption{Response from Postman Request}
@end float

@c _____________________________________

@node Issuing JWT's
@subsection Issuing JWT's
@cindex issue JWT

Now that we have built a simple  server that can handle GET, and POST requests,
let’s build a simple JWT issuer.

Lets start  by creating  a new  array called @code{users}  that will  contain a
couple of users along with their passwords as shown below:

@example
const users = [
  @{id: 1, username: "clarkKent", password: "superman"@},
  @{id: 2, username: "bruceWayne", password: "batman"@}
];
@end example

Lets  rewrite the  @code{/login}  route.   Here, we  will  first  check if  the
submitted request contains both a @code{username} and @code{password}.  If that
is not the case, then the server should respond with a 400 status.

@example
app.post("/login", (req, res) => @{
  if (!req.body.username || !req.body.password) @{
    res.status(400).send("Error. Please enter the correct username and password");
    return;
  @}
@end example

Next, if the request is valid, we will need to check if the user in the request
is  present in  our users  array.  In  the same  @code{/login} route  below the
@code{if} statement, write:

@example
  const user = users.find((u) => @{
    return u.username === req.body.username && u.password === req.body.password;
  @});
@end example

But if the  user in the request is  not present in the users array,  we need to
respond with  a status  code of  401.  Again in  the same  @code{/login} route,
write:

@example

@end example

Before   going   forward,   let’s    install   another   library   called   the
@file{jsonwebtoken}.

@example
$ yarn install jsonwebtoken
@end example

At the top of the @file{index.js}  file, write the @code{require} statement for
the @file{jsonwebtoken} library as shown below:

@example
const jwt = require("jsonwebtoken");
@end example

We will use this  library to create a JSON Web Token for  every valid user.  To
do  this, we  will  create a  new @code{const}  called  @code{token} using  the
@code{sign}  method from  the @file{jsonwebtoken}  library.  Note  that we  are
still writing the code inside the @code{/login} route.

@example
  const token = jwt.sign(@{
    sub: user.id,
    username: user.username
  @}, "mykey", @{expiresIn: "3 hours"@});
  res.status(200).send(@{access_token: token@})
@end example

Now  go to  POSTMAN, and  send a  @code{post} request  with the  following JSON
object in its body.

@example
@{
  "username": "clarkKent",
  "password": "superman",
@}
@end example

The result will be a JSON Web Token as shown below:

@float Image,img:jwt
@image{resources/jwt,,,jwt}
@caption{JWT}
@end float

If you copy the value of access_token into the @file{JWT.IO} Debugger, you will
see that  it is the  same @code{username} and  @code{password}, but with  a few
extra things.

@float Image,img:encoded
@image{resources/encoded,,,encoded}
@caption{Encoded JWT}
@end float

@c _____________________________________

@node Side Note On CORS
@subsection Side Note On CORS
@cindex CORS

In some  cases where  the API that  your app  tries to access  is running  on a
different server than that of your app’s, will return some kind of @samp{Failed
To Load error}.

To  prevent  this  from  happening,  we  can  install  another  library  called
@file{cors}.

@example
$ yarn install cors
@end example

Then at the top of the @file{index.js} file, write the @code{require} statement
for this library as shown below:

@example
const cors = require("cors");
@end example

Then similar to  what we did with the @file{body-parser}  library, we will tell
the @file{express} to use @file{cors} as shown below:

@example
app.use(cors());
@end example

@c _____________________________________

@node Provide User Access To An API using JWT
@subsection Provide User Access To An API using JWT

Here,  we will  create a  new API  with two  routes.  The  first route  will be
public, while  the second one will  require the user to  be authenticated using
JWT in order to access it.

Let’s create a new file in the @file{jwt-auth} folder called @file{api.js}.  In
this file, write the following startup code:

@example
const express = require("express");
const bodyParser = require("body-parser");
const app = express();
const PORT = process.env.API_PORT || 8888;
app.use(bodyParser.json());
app.get("*", (req, res) => @{
  res.sendStatus(404);
@});
app.listen(PORT, () => @{
  console.log(`Server is running on port $@{PORT@}.`);
@});
@end example

Let’s create  a new route  called @file{/asset}.  This  will be a  public route
that I had mentioned earlier, and will simply return a status code 200.

@example
app.get("/asset", (req, res) => @{
  res.status(200).send("Everybody can see this");
@});
@end example

The second, secret  route will be @file{/asset/secret}  and it will be  secured with a
@code{jwtCheck} as shown below:

@example
app.get("/asset/secret", jwtCheck, (req, res) => @{
  res.status(200).send("Only logged in people can see me");
@});
@end example

Since the  @file{index.js} file is set  to run on the  PORT 8888, we need  to set some
other PORT  for this file.  To  do that, open  the command terminal and  run the
command:

@example
$ export API_PORT=5555
@end example

Even though  we have said  that the @file{/asset/secret}  route is secure,  we haven’t
actually  implemented it.  To  do so,  we need  to  install another  middleware
library called @file{express-jwt}.

@example
$ yarn install express-jwt
@end example

Then at the  top of @file{api.js} file, write the  @code{require} statement for
this library.

@example
const expressjwt = require("express-jwt");
@end example


We  will  use  this  library  to  define  the  @code{jwtCheck}.   We  will  use
@code{jwtCheck} to check if the signature matches  the one that we got from our
authentication server.  If you recall, we have named it as @code{mykey}.

@example
const jwtCheck = expressjwt(@{
  secret: "mykey"
@});
@end example

Run  the @command{node  api.js}  command in  your terminal.   To  check if  the
authentication works  as it should,  go to POSTMAN and  run the GET  request on
@file{localhost:5000/asset}.  The  response should  be @samp{Everybody  can see
this}.

Then  run  the GET  request  on  @file{localhost:5000/asset/secret}.  What  you
should get is a big error code that looks something like this:

@float Image,img:error
@image{resources/error,,,error}
@caption{Error}
@end float

To solve this, go to the Authentication  tab in POSTMAN, and select the Type as
Bearer Token.  Then enter the value of Token  as the one that we had received in
the previous sections.

@float Image,img:resolved
@image{resources/resolved,,,resolved}
@caption{Resolved}
@end float

@c _____________________________________

@node Conclusion To Article
@subsection Conclusion Article
@cindex conclusion

Compared  to  other  web  tokens   like  @file{Simple  Web  Tokens}  (SWTs)  or
@file{Security Assertion Markup Language} (SAML), JWT  is much simpler as it is
based on JSON which is easier to understand than XML.

If we  encode the JSON,  it will  become even more  smaller in size  than SAML,
making it easier to pass in HTML and HTTP environments.

Security wise, SWTs  use a single key,  whereas both JWT and SAML  use a public
and private key pair for better authentication.

Talking from  a usage  point of view,  JWTs are used  at Internet  scale.  This
means that  it is easier  to process  on the user’s  devices, be it  laptops or
mobile.

Apart  from authentication,  JSON  Web Token  are  a great  and  secure way  of
transmitting data between multiple parties.  The fact that JWTs have signatures
makes it easier for everyone to  easily identify the sender of information.  All
you need is the correct key.









@c =============================================================================
@c APPENDICES
@c =============================================================================








@c *****************************************************************************

@node Bib Macros
@appendix Bib Macros Documentation

This appendix describes @file{my-bib-macros.texi} by Aaron S. Hawley (2004).




@c -----------------------------------------------------------------------------

@node Bib Macros Introduction
@appendixsec Bib Macros Introduction
@cindex Bib Macros introduction

The Texinfo utility @file{my-bib-macros.texi}@footnote{Originally, a separate
file, these macros have been incorporated into this document and no longer need
to be input separately.} creates references to a ``Bibliography'' or
``References'' section of a Texinfo document, using Texinfo's macro system.
Although not as terse a way to cite systems as is found in document systems
like @TeX{}, the format is simpler and the rendering is easier for non-academic
readers.




@c -----------------------------------------------------------------------------

@node Bib Macros Usage
@appendixsec Bib Macros Usage
@cindex Bib Macros usage

@heading Header Commands

Originally, the beginning of a document needed to @command{@@include} the file
@file{my-bib-macros.texi}, which file needed to be made available in the
current directory of the parent file.  This file has instead been incorporated
into this source file, and so there is not need to include it.

A single call should be made to choose to use a list or a table within the
@code{header} section.  Choose one of the commands

@itemize
@item
@command{@@mybibuselist@{@var{node}@}}, @r{or}
@item
@command{@@mybibusetable@{@var{node}@}},
@end itemize

@noindent
where @var{node} is the node containing the location where the references are
listed.

@heading The Bib Node

At the selected node, place the command @command{@@mybibnode@{@}}.  You can
label the section as @code{References} or something similar.  NOTE that only
one ``Reference'' section is allowed per document.

@example
@@node @@mybibnode@{@}
@@chapter Bibliography References
@end example

@heading Cited Works and References

The cited works are placed into either a Texinfo table or list, and itemized
using the command @command{@@mybibitem@{@var{ref-name}@}}.

Here is a table example:

@example
@@table @@asis

@@mybibitem@{@var{ref-name}@}
[Citation information @dots{}]

[more items @dots{}]

@@end table
@end example

@noindent
and here is a list (which can be either an @command{@@enumerate} or an
@command{@@itemize} environment):

@example
@@enumerate

@@mybibitem@{@var{ref-name}@} [Citation information @dots{}]

[more items @dots{}]

@@end enumerate

@@itemize @@bullet

@@mybibitem@{@var{ref-name}@} [Citation information @dots{}]

[more items @dots{}]

@@end itemize
@end example

References to cited works can be put in any section of a document.  They are
cited to with with following command, where @var{ref-name} matches one of the
@var{ref-name}'s given in the Reference table or list environment.

@example
@command{@@mybibcite@{@var{ref-name}@}}
@end example




@c -----------------------------------------------------------------------------

@node Bib Macros Example
@appendixsec Bib Macros Example
@cindex Bib Macros Example

The following is an example of a complete, albeit short, document that produces
a single reference to a single cited work.  Marks have been made to indicate
where Bib Macros commands are located.

@example
\input texinfo
@@comment %**start of header
@@setfilename my-file-with-bib.info
@@settitle Texinfo with a Bibliography and References

@@include my-bib-macros.texi                                                 <==
@@mybibuselist@{References@}                                                 <==

@@comment %**end of header

@@node Top
@@top Top

@@menu
* Introduction::
* @@mybibnode@{@}::

@@end menu

@@node Introduction
@@chapter Introduction

The ability of a documentation format to make cross references to a
bibliography, a feature of @LaTeX{} @@mybibcite@{LaTeX2e@},                  <==
isn't currently supported in Texinfo.

@@node @@mybibnode@{@}                                                       <==
@@chapter References

@@itemize @@asis

@@mybibitem@{LaTeX2e@}                                                       <==
Leslie Lamport, LaTeX User's Guide andReference Manual, 2nd edition,
Addison-Wesley, Reading, Massachusetts, 1994.

@@end itemize

@@bye

@end example


@c .....................................

@node Example INFO Output
@appendixsubsec Example INFO Output

This example produces (in Info):

@verbatim
1 Introduction
**************

The ability of a documentation format to make cross references to a
bibliography, a feature of LaTeX (See item [LaTeX2e] in
*Note LaTeX2e:References.), is not currently supported in Texinfo.

2 References
************

[LaTeX2e] Leslie Lamport, LaTeX User's Guide and Reference Manual, 2nd edition,
Addison-Wesley, Reading, Massachusetts, 1994.
@end verbatim


@c .....................................

@node Example PDF Output
@appendixsubsec PDF Output

@noindent
and (in printed output):

@verbatim
1 Introduction
**************

The ability of a documentation format to make cross references to a
bibliography, a feature of LaTeX (See item [LaTeX2e] in Chapter 2 [References],
page 3.), is not currently supported in Texinfo.

2 References
************

[LaTeX2e] Leslie Lamport, LaTeX User's Guide and Reference Manual, 2nd edition,
Addison-Wesley, Reading, Massachusetts, 1994.
@end verbatim




@c -----------------------------------------------------------------------------

@node Bib Macros Notes
@appendixsec Bib Macros Notes
@cindex Bib Macros Notes

The pointers to references will be functional in hypertext documentation
(@file{INFO}, @file{HTML}, @file{XML} and others) and properly rendered in
print documents, because they are implemented with Texinfo's cross referencing
capabilities (using @command{@@anchor} and @command{@@ref}).  Failures by an
author to make proper references with @file{my-bib-macros} in their document
will give cross referencing errors by Texinfo conversion tools.


An improvement of this system would create cross references (with
@command{@@xref}) at each cited work to all the originating cross refererences.




@c -----------------------------------------------------------------------------

@node Bib Macros Configuration Options
@appendixsec Bib Macros Configuration Options
@cindex Bib Macros configuration

@table @command

@item @@mybibusetable
Whether each @@mybibitem will be put in a table; or

@item @@mybibuselist
Whether each @@mybibitem will be put in a list.

@item @@mybibnode@{@}
Macro to be placed at node containing references and calls to @@mybibcite@{@}

@item @@mybibitem@{@var{ref-name}@}
Macro to create a cited work, placed inside a table or list;

@item @@mybibcite@{@var{ref}@}
Cites the cross reference @var{ref}.

@end table





@c -----------------------------------------------------------------------------

@node Bib Macros Example Program
@appendixsec Bib Macros Example Program
@cindex Bib Macros example program

@(my-file-with-bib.texi@)=
@<my-bib-macros-example---HEADER@>
@<my-bib-macros-example---BODY@>
@<my-bib-macros-example---REFERENCE@>
@<my-bib-macros-example---END@>
@


@c .....................................

@node Bib Macros Example Header
@appendixsubsec Bib Macros Example Header

The command @command{@@mybibuselist@{References@}} creates a @code{@@node} of
that name; you must place the command @command{@@mybibnode@{@}} at the location
you want the cited works to reside, along with a sectioning command with an
appropriate title.

@<my-bib-macros-example---HEADER@>=
\input texinfo    @c -*-texinfo-*-

@comment %**start of header
@setfilename my-file-with-bib.info
@settitle    Texinfo with a Bibliography and References
@include     my-bib-macros.texi
@mybibuselist{References}
@comment %**end of header

@


@c .....................................

@node Bib Macros Example Body
@appendixsubsec Bib Macros Example Body

The body of the document has nodes and sectioning as normal, with citations to
cited works embedded inside.  This example has a @code{top} node and single
chapter, with a citation inside the text of the chapter.

@<my-bib-macros-example---BODY@>=
@node Top
@top Top

@menu
* Introduction::
* @mybibnode{}::

@end menu

@

@c .....................................

@node Bib Macros Example Reference
@appendixsubsec Bib Macros Example Reference

Here is the chapter and citation.

@<my-bib-macros-example---REFERENCE@>=
@node Introduction
@chapter Introduction

The ability of a documentation format to make cross references to a
bibliography, a feature of @LaTeX{}
@mybibcite{LaTeX2e},
isn't currently supported in Texinfo.

@

@c .....................................

@node Bib Macros Example End
@appendixsubsec Bib Macros Example End

Here is the Reference section, inside another chapter.  Notice that the node
title is a macro call to @command{@@mybibnode@{@}}, and the cited works are
in an @command{@@itemize} environment.  This environment must match up with
what was chosen in the @code{header} section.

@<my-bib-macros-example---END@>=
@node @mybibnode{}
@chapter References

@itemize @asis

@mybibitem{LaTeX2e}
Leslie Lamport, LaTeX User's Guide andReference Manual, 2nd edition,
Addison-Wesley, Reading, Massachusetts, 1994.

@end itemize

@

@c .....................................

@node The Bib Macros
@appendixsubsec The Bib Macros

The macros begin with configuration options, i.e., whether to use a table or
list environment, and what to call the node containing the cited works.  It
then continues with defining the macrose to make the items and references
work.

@(my-bib-macros.texi@)=

@<Set-Ref-Node---Node@>
@<Bib-Node@>
@<Bib-Use-Table---Node@>
@<Bib-Use-List---Node@>
@<Bib-Cite-Ref---Ref@>
@<Bib-Make-Ref---Node@>
@<Bib-Item---Ref@>

@

@c _____________________________________

@node Set Ref Node
@appendixsubsubsec Set Ref Node

Defines the name of the node to contain references.

@<Set-Ref-Node---Node@>=
@macro mybibsetrefnode{node}
@set mybibrefnode \node\
@end macro

@

@c _____________________________________

@node Bib Node
@appendixsubsubsec Bib Node

Macro to be placed at node containing references and calls to @@mybibcite@{@}.

@<Bib-Node@>=
@macro mybibnode{}
@value{mybibrefnode}
@end macro

@

@c _____________________________________

@node Bib Use Table
@appendixsubsubsec Bib Use Table

Whether each @code{@@mybibitem} will be put in a table:

@<Bib-Use-Table---Node@>=
@macro mybibusetable{node}
@set mybibtable true
@ifset mybiblist
@clear mybiblist
@end ifset
@mybibsetrefnode{\node\}
@end macro

@

@c _____________________________________

@node Bib Use List
@appendixsubsubsec Bib Use List

Or whether each @code{@@mybibitem} will be put in a list:

@<Bib-Use-List---Node@>=
@macro mybibuselist{node}
@set mybiblist true
@ifset mybibtable
@clear mybibtable
@end ifset
@mybibsetrefnode{\node\}
@end macro

@

@c _____________________________________

@node Bib Cite Ref
@appendixsubsubsec Bib Cite Ref

Cites the cross reference REF.

@<Bib-Cite-Ref---Ref@>=
@macro mybibcite{ref}
@inlineifclear{mybibrefnode, @mybibmakeref{mybibsetrefnode was not used, \ref\}}
@c %**else if
@ifset mybibrefnode
@mybibmakeref{@mybibnode{}, \ref\}
@end ifset
@c for whatever reason, a space betwee @end ifset and @end macro is mandatory
@end macro

@

@c _____________________________________

@node Bib Make Ref
@appendixsubsubsec Bib Make Ref

Makes a reference using Texinfo's cross-reference tools.

@<Bib-Make-Ref---Node@>=
@macro mybibmakeref{node, ref}
(See item @cite{\ref\} in @ref{\ref\,,\node\}.)
@end macro

@

@c _____________________________________

@node Bib Item
@appendixsubsubsec Bib Item

Creates a bibliography item in a table or list, as appropriate.

@<Bib-Item---Ref@>=
@macro mybibitem{ref}
@ifclear mybiblist
@ifclear mybibtable
@set mybiblist true
@end ifclear
@end ifclear
@ifset mybiblist
@item
@anchor{\ref\}[\ref\]
@end ifset
@c %**else if
@ifset mybibtable
@item @anchor{\ref\}\ref\ ---
@end ifset
@end macro

@c END of macro definitions

@





@c *****************************************************************************

@node The Makefile
@appendix The Makefile
@cindex makefile


@(Makefile@)=
# MAKEFILE FILE CHUNKS
######################

@<Makefile---Variable Definitions@>
@<Makefile---Default Target@>
@<Makefile---TWJR Targets@>
@<Makefile---Clean Targets@>
@<Makefile---Bib Macros Example Target@>
@<Makefile---Applications@>

@




@c -----------------------------------------------------------------------------

@node Makefile Variable Definitions
@appendixsec Makefile Variable Definitions

@<Makefile---Variable Definitions@>=
# VARIABLE DEFINITIONS
######################

FILE  := Security
SHELL := /bin/bash

@




@c -----------------------------------------------------------------------------

@node Makefile Default Target
@appendixsec Default Target
@cindex default target

The @code{default} target processes the  @code{TEXI} source file into an
@code{INFO} file,  a @code{PDF} document,  and an @code{HTML}  web site.
This process  depepnds upon the  @code{TEXI} file having  been generated
from the @code{TWJR} file and its menus and nodes updated first.

The  target  @code{TWJR}  will   run  both  commands  @command{jrtangle}
(producing code  output) and @command{jrweave}  (producing documentation
source code  output) on the  @code{TWJRJ} source code, while  the target
@code{WEAVE} (or  alternatively @code{TEXI})  will run just  the command
@command{jrweave} on the @file{TWJR} file.

In either  case, the  documentation source  code (the  @file{TEXI} file)
will need  to be  updated, which  involves updating  its menus  and node
links.   You  may then  run  the  @code{default} target,  producing  the
@acronym{INFO}, @acronym{PDF}, and @acronym{HTML} files.

@<Makefile---Default Target@>=
# DEFAULT Target
################
.PHONY : TWJR TANGLE WEAVE TEXI INFO PDF HTML
.PHONY : default twjr tangle weave texi info pdf html
default : INFO PDF HTML

@




@c -----------------------------------------------------------------------------


@node Makefile TWJR Targets
@appendixsec TWJR Targets
@cindex TWJR targets

These targets are all related to processing the main source @acronym{TWJR} file
in  some  way.   The  target  @code{twjr} ``tangles  and  weaves''  the  source
document.     @code{info}    runs     @command{makeinfo},    @code{pdf}    runs
@command{pdftexi2dvi}, and @code{html} runs @command{makeinfo --html}.

@<Makefile---TWJR Targets@>=
# TWJR TARGETS
##############
TWJR : twjr
twjr : tangle weave worldclean

TANGLE : tangle
tangle : $(FILE).twjr
	jrtangle $(FILE).twjr

WEAVE : weave
weave : TEXI
TEXI  : texi
texi  : $(FILE).texi
$(FILE).texi : $(FILE).twjr
	jrweave $(FILE).twjr > $(FILE).texi

INFO : info
info : $(FILE).info
$(FILE).info : $(FILE).texi
	makeinfo $(FILE).texi
openinfo : INFO
	emacs $(FILE).info

PDF : pdf
pdf : $(FILE).pdf
$(FILE).pdf : $(FILE).texi
	pdftexi2dvi --build=tidy --build-dir=build --quiet $(FILE).texi
openpdf : PDF
	open $(FILE).pdf

HTML : html
html : $(FILE)/index.html
$(FILE)/index.html : $(FILE).texi
	makeinfo --html $(FILE).texi
openhtml : HTML
	open $(FILE)/index.html

@




@c -----------------------------------------------------------------------------

@node Makefile Clean Targets
@appendixsec Makefile Clean Targets
@cindex Makefile clean targets

The @command{clean} target removes backup files.  The @command{dirclean} target
removes  source  directories,  (e.g.,  @file{bin/}  and  and  @file{src/})  and
associated  files and  programs  inside them.   The @command{distclean}  target
removes  the  @file{HTML} directory  and  all  of its  files,  as  well as  the
@file{PDF}  file.    Finally,  the  @command{worldclean}  target   removes  the
@file{INFO} files, leaving the three files:

@itemize
@item
@file{TWJR}
@item
@file{TEXI}
@item
@file{MAKEFILE}
@end itemize

The @file{TEXI} file is always left because  it will be accurate so long as the
@file{TWJR} file is not modified, and  if the @file{TWJR} is modified, then the
@file{TEXI} file will be resourced automatically.

@<Makefile---Clean Targets@>=
.PHONY : clean dirclean distclean worldclean

# remove backup files
clean :
	rm -f *~ .*~ #*#

# remove  all directories;  leave the  source files  @file{TWJR}, @{TEXI},  and
# @file{Makefile}; resources dir
dirclean : clean
	for file in *; do          \
	  case $$file in           \
	    $(FILE)* | Makefile) ;;\
	    my-bib-macros*)      ;;\
            resources*)	 	 ;;\
	    *) rm -vfr $$file	 ;;\
	  esac                     \
	done

# after dirclean, remove HTML directory and PDF files
distclean : dirclean
	rm -vfr $(FILE) $(FILE).pdf

# after distclean, remove INFO and my-bib-macros
worldclean : distclean
	rm -rfv *.info* my-bib-macros.texi

@




@c -----------------------------------------------------------------------------

@node Makefile Applications
@appendixsec Makefile Applications
@cindex Makefile applications

@<Makefile---Applications@>=
@




@c -----------------------------------------------------------------------------

@node Bib Macros Example Target
@appendixsec Bib Macros Example Target

@<Makefile---Bib Macros Example Target@>=
# BIB MACROS EXAMPLE TARGET
# #########################
.PHONY : bibmacros bibexample
bibmacros : bibmacros.texi
bibmacros.texi : twjr
bibexample : bibmacros.texi
	makeinfo my-file-with-bib.texi

@








@c *****************************************************************************
@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@menu
* File Definitions::          Source files by definition.
* Code Chunk Definitions::    Code chunks by definition.
* Code Chunk References::     Code chunks by reference.
@end menu




@c -----------------------------------------------------------------------------
@node File Definitions
@appendixsec Source File Definitions

@print_file_defs




@c -----------------------------------------------------------------------------
@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs




@c -----------------------------------------------------------------------------
@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs







@c *****************************************************************************

@node @mybibnode{}
@unnumbered Bibliography

@table @asis

@mybibitem{JWT}
@url{https://blog.bitsrc.io/understanding-json-web-token-authentication-a1febf0e15,
@cite{Understanding JSON Web Token Authentication}}, by Rajat S

@mybibitem{JWT-INTRO}
@url{https://jwt.io/introduction/, Introduction to JSON Web Tokens}
by Auth0

@end table







@c *****************************************************************************

@node List of Tables
@unnumbered List of Tables

@listoffloats Table








@c  *****************************************************************************
@node Concept Index
@unnumbered Index

@printindex cp

@bye

TODO:
