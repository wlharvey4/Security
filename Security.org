# -*- mode:org; fill-column:79; -*-
#+title:Security Information
#+author:Pinecone062
#+date:April 14, 2019
#+macro:version 0.2.17.<2019-05-02 Thu 10:06>
Version {{{version}}} By {{{author}}}

* JSON Web Tokens
** Article---How JWTs Secure Your API
:PROPERTIES:
:source-url:   https://vuejsdevelopers.com/2019/04/15/api-security-jwt-json-web-tokens/?
:source-title: How JSON Web Token (JWT) Secures Your API
:source-author: Anthony Gore
:source-date: April 14, 2019
:END:
*** Introduction From How JWTs Securre Your API
You've probably heard that the JSON Web Token (JWT) is the current
state-of-the-art technology for securing APIs.  Like most security topics, it's
important to understand how it works (at least, somewhat) if you're planning to
use it.  The problem is that most explanations of JWT are technical and
headache-inducing.  Let's see if I can explain how a JWT can secure your API
without crossing your eyes!

*** API Authentication

{{{heading(Need to Authenticate Access)}}}

#+CINDEX:authentication
Certain API resources need restricted access.  We don't want one user to be
able to change the password of another user, for example.  That's why we
protect certain resources---make users supply their ID and password before
allowing access---in other words, we authenticate them.

{{{heading(HTTP Requests are Stateless)}}}

#+CINDEX:stateless, HTTP
The difficulty in securing an HTTP API is that requests are stateless---the API
has no way of knowing whether any two requests were from the same user or not.
So why don't we require users to provide their ID and password on every call to
the API?  Only because that would be a terrible user experience.

*** JSON Web Token
:PROPERTIES:
:article-title: What is a JSON Web Token?
:article-cite: https://robmclarty.com/blog/what-is-a-json-web-token
:article-author: Rob McLarty
:END:
What we need is a way to allow a user to supply their credentials just once,
but then be identified in another way by the server in subsequent requests.
Several systems have been designed for doing this, and the current
state-of-the-art standard is the JSON Web Token.

{{{heading(How JWTs Work)}}}

There's a great [[https://robmclarty.com/blog/what-is-a-json-web-token][article]] on the topic which makes a good analogy about how JSON
web tokens work:
#+begin_quote
Instead of an API, imagine you're checking into a hotel.  The "token" is the
plastic hotel security card that you get that allows you to access your room,
and the hotel facilities, but not anyone else's room.  When you check out of
the hotel, you give the card back.  This is analogous to logging out.
#+end_quote

*** Structure of the Token

{{{heading(What a JWT Looks Like)}}}

#+CINDEX:HTTP request header
#+CINDEX:header, HTTP request
#+CINDEX:request, HTTP header
#+CINDEX:bearer, authorization
#+CINDEX:authorization, bearer
#+CINDEX:token
#+CINDEX:bearer token
Normally a JSON web token is sent via the header of HTTP requests. Here's what
one looks like:
: Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIn0.dozjgNryP4J3jVmNHl0w5N_XgL0n3I9PlFUP0THsR8U
In fact, the token is the part after "Authorization: Bearer", which is just the
HTTP header info.

{{{heading(The Header Payload and Signature)}}}

#+CINDEX:header
#+CINDEX:payload
#+CINDEX:signature
#+CINDEX:Base 64 encode
Before you conclude that it's incomprehensible gibberish, there are a few
things you can easily notice.  Firstly, the token consists of three different
strings, separated by a period.  These three string are base 64
encoded[fn::Base 64 encoding is a way of transforming strings to ensure they
don't get screwed up during transport across the web.  It is not a kind of
encryption and anyone can easily decode it to see the original data.] and
correspond to:
- the /header/,
- the /payload/, and
- the /signature/.


We can decode these strings to get a better understand of the structure of JWT.

{{{subheading(Header)}}}

#+CINDEX:header, dfn
The following is the decoded header from the token.  The @@texinfo:@dfn{header}@@ is
meta information about the token.  It doesn't tell us much to help build our
basic understanding, so we won't get into any detail about it.

#+BEGIN_SRC js
{
  "alg": "HS256",
  "typ": "JWT"
}
#+END_SRC

{{{subheading(Payload)}}}

#+CINDEX:payload, dfn
The payload is of much more interest.  The @@texinfo:@dfn{payload}@@ can include any
data you like, but you might just include a user ID if the purpose of your
token is API access authentication.

#+BEGIN_SRC js
{
  "userId": "1234567890"
}
#+END_SRC

It's important to note that the payload is not secure.  Anyone can decode the
token and see exactly what's in the payload.  For that reason, we usually
include an ID rather than sensitive identifying information like the user's
email.  Even though this payload is all that's needed to identify a user on an
API, it doesn't provide a means of authentication.  Someone could easily find
your user ID and forge a token if that's all that was included.

So this brings us to the signature, which is the key piece for authenticating
the token.

*** Hashing Algorithms
#+CINDEX:hashing algorithm, dfn
#+CINDEX:hashing algorithm, SHA256
#+CINDEX:hash, dfn
#+CINDEX:SHA256 hashing algorithm
Before we explain how the signature works, we need to define what a
@@texinfo:@dfn{hashing algorithm}@@ is.  To begin with, it's a function for
transforming a string into a new string called a @@texinfo:@dfn{hash}@@.  For example,
say we wanted to hash the string "Hello, world".  Here's the output we'd get
using the =SHA256= hashing algorithm:
: 4ae7c3b6ac0beff671efa8cf57386151c06e58ca53a78d83f36107316cec125f
The most important property of the hash is that you can't use the hashing
algorithm to identify the original string by looking at the hash.  In other
words, we can't take the above hash and directly figure out that the original
string was "Hello, world". The hash is complicated enough that guessing the
original string would be infeasible.  There are many different types of hashing
algorithms, but =SHA256= is commonly used with JWT.

{{{heading(JWT Signature)}}}

#+CINDEX:signature, dfn
So coming back to the JWT structure, let's now look at the third piece of the
token, the @@texinfo:@dfn{signature}@@.  This actually needs to be calculated:

#+BEGIN_SRC js
HMACSHA256(
  base64UrlEncode(header) + "." + base64UrlEncode(payload),
  "secret string"
);
#+END_SRC

Here's an explanation of what's going on here:

#+CINDEX:hashing function
- Firstly, =HMACSHA256= is the name of a hashing function and takes two
  arguments:
  - the string to hash, and
  - the "secret" (defined below).
- Secondly, the string we hash is the base 64 encoded /header/, plus the base 64
  encoded /payload/.
- Thirdly, the /secret/ is an arbitrary piece of data that only the server
  knows.


Why include the header and payload in the signature hash?  This ensures the
signature is unique to this particular token.

{{{subheading(The Secret)}}}

#+CINDEX:secret
What's the @@texinfo:@dfn{secret}@@?  To answer this, let's think about how you would
forge a token.  We said before that you can't determine a hash's input from
looking at the output.  However, since we know that the signature includes the
header and payload, as those are public information, if you know the hashing
algorithm (hint: it's usually specified in the header), you could generate the
same hash.  But the secret, which only the server knows, is not public
information.  Including it in the hash prevents someone generating their own
hash to forge the token.  And since the hash obscures the information used to
create it, no one can figure out the secret from the hash, either.

{{{subheading(Salting)}}}

#+CINDEX:salting
The process of adding private data to a hash is called @@texinfo:@dfn{salting}@@ and
makes cracking the token almost impossible.

*** Authentication Process
#+CINDEX:authentication process
So now you have a good idea of how a token is created.  How do you use it to
authenticate your API?

{{{heading(Login)}}}

#+CINDEX:token, generate
#+CINDEX:generate token
A token is generated when a user logs in and is stored in the database with the
user model.  The token then gets attached as the /authorization header/ in the
response to the login request.

#+caption:Generating a Token Upon Login; ~loginController.js~
#+name:generate-token
#+BEGIN_SRC js
if (passwordCorrect) {
  user.token = generateToken(user.id);
  user.save();
  res.headers("authorization", `Bearer ${token}`).send();
}
#+END_SRC

{{{heading(Authenticating requests)}}}

#+CINDEX:requests, authenticate
#+CINDEX:authenticate requests
Now that the client has the token, it can attach it to any future requests to
authenticate the identity of the user.  When the server receives a request with
an authorization token attached, the following happens:

1. It decodes the token and extracts the ID from the payload.
2. It looks up the user in the database with this ID.
3. It compares the request token with the one that's stored with the user's
   model.  If they match, the user is authenticated.

#+caption:The Server authenticates requests from the Client; ~authMiddleware.js~
#+name:authenticate-requests
#+BEGIN_SRC js
const token = req.header.token;
const payload = decodeToken(token);
const user = User.findById(payload.id);
if (user.token = token) {
  // Authorized
} else {
  // Unauthorized
}
#+END_SRC

{{{heading(Logging out)}}}

#+CINDEX:logout
If the user logs out, simply delete the token attached to the user model, and
now the token will no longer work.  A user will need to log in again to generate
a new token.

#+caption:Logging a user out; ~logoutController.js~
#+name:logout
#+BEGIN_SRC js
user.token = null;
user.save();
#+END_SRC

*** Wrapup
So that's a very basic explanation of how you can secure an API using JSON Web
Tokens.  I hope your head doesn't hurt too much.

** Course---JSON Web Token Authentication with Node.js
:PROPERTIES:
:source:   Egghead.io
:author:   Joel Lord
:END:
*** About the Course
In this course, we will build a simple authentication server that will act as a
token issuer, and we will use those tokens to access resources on an API.
Starting from scratch, the participants will learn how easy token based
authentication can be and will understand how to use them on their APIs as well
as on the front end of their web applications.
**** Source Code
[[https://github.com/eggheadio-projects/egghead-auth-course/tree/master][eggheadio-projects/egghead-auth-course]]
**** The Author
- Joel Lord
- [[http://www.javascripteverything.com/about][About the author]]
- [[http://www.javascripteverything.com/about][Javascript Everything]] author's blog
- [[https://github.com/joellord][GitHub]]
**** Author's Introduction
00:00 Hey everyone, welcome to this course on JSON web token authentication
with Node.JS.  The goal of this course is to introduce you to web-based
authentication using JWTs.

00:11 Through these few lessons, we will build a simple application that will
connect to a secured API and we will build an authentication server to provide
us with tokens that we need in order to connect and access those routes.

00:25 We will start slowly by building a simple web server using Express.  We
will then see how to make this API more flexible by introducing environment
variables, and then how to handle post request, and how to parse the body of
those requests.

00:40 At this point, we will be able to start building our authentication
server.  The server will validate the user credentials and provide those users
with a JSON web token.  Using this token, we will be able to go back to our API
and secure one of our routes so that only an authenticated user can access
those resources.

00:59 Finally, what would a back-end be without a good UI? We will build a
quick front-end that will connect to our API.  This UI will also collect user
credentials and send them over to the authentication server to fetch a JWT.

01:13 All this will be done using plain old vanilla JavaScript and none of
those fancy frameworks.  This will give you all the necessary tools to
implement this solution in any application you might build.

01:25 Of course, the examples in this course will be simple, and we will focus
more on the concepts rather than building a real secure API.  For that reason,
we will also show you how to switch your primitive authentication server to use
a proven solution.

01:40 In this lesson, you will be introduced to Auth0 as a solution to provide
secure identity management and federated log in to your users.  Go ahead, watch
this course, and learn how to build more secure applications right now.
*** Lesson 0---Package Setup
The course will be set up in a root directory ~egghead-jwt-auth~, with
~lesson#~ directories for each lesson 1 through 8.  The following shell script
checks for the existence of a ~package.json~ file in the root directory; if one
is found, it simply prints a message.  If one is not found, then it initializes
a new package using the ~yarn init~ command using default values.  The lessons
will add and install prerequisites to this ~package.json~ file.

#+NAME:tangle-files
#+BEGIN_SRC emacs-lisp :results silent :exports results
(org-babel-tangle-file (buffer-file-name))
#+END_SRC

#+name:package-init
#+begin_src sh :dir egghead-jwt-auth :results output :exports both
[ -e package.json ] && \
  echo "package.json has already been created" || \
  yarn --yes init
  cat package.json
#+end_src

*** Lesson 1---Set Up a Web Server in Node.js Using Express
#+CINDEX:Express web server
#+CINDEX:web server, Express
#+CINDEX:server, Express web
#+CINDEX:404 error
In this lesson, we build a very simple Express server.  This server will have a
single route that displays the current date and time and a handler for =404=
pages.

**** Setting Up A Little Express Server
#+CINDEX:Express server, build
00:00 To build your first Express server, the first thing you need to do is to
~require express~.  In order for your code to be able to use it, you need to
install it using ~yarn add express~:

#+name:lesson1-package.json
#+begin_src sh :dir egghead-jwt-auth :results output :exports results
yarn add express
#+end_src

: package.json
: ------------

#+begin_src sh :dir egghead-jwt-auth :results output :exports results
cat package.json
#+end_src

: index.js
: --------

#+name:require-express
#+begin_src js -n
const express = require("express");
#+end_src

{{{heading(Setup Constants)}}}

#+CINDEX:PORT, define
00:16 We'll go back to our code.  We'll declare a new constant ~app~ which will
use the ~express~ library that we've just included.  We'll also declare a new
constant for the =PORT= number.  We'll use =8888= for now.

#+name:app-express
#+begin_src js +n
const app = express();
#+end_src

#+name:port-8888
#+begin_src js +n
const PORT = 8888;
#+end_src

{{{heading(Setup Routes)}}}

{{{subheading(Status Route)}}}

#+CINDEX:route, define
#+CINDEX:@code{app.get}
#+CINDEX:status route
00:30 Then we can do our first route.  We'll use ~app.get~, and we'll specify
the name of the route.  In this case, we're using =status=, and it takes a
callback which has a request and a response as parameters.

#+name:status-route
#+begin_src js +n
app.get("/status", (req, res) => {
    const localTime = (new Date()).toLocaleTimeString();
    res.status(200).send(`Server time is ${localTime}.`);
});
#+end_src
{{{subheading(Catchall Route)}}}

#+CINDEX:catchall route
01:13 Let's also add a catchall route. We'll just use star (=*=), which means
any route that wasn't defined already.  01:19 It also takes a callback with a
request and response.  We can build our response here, and it will simply sense
that as =404=, or 'page not found'.

#+name:catchall-route
#+begin_src js +n
app.get("*", (req, res) => {
    res.sendStatus(404);
});
#+end_src

{{{heading(Start the App Listening)}}}

#+CINDEX:@code{app.listen}
#+CINDEX:app, run
01:30 Finally, we'll use ~app.listen~ to initialize our server.  It'll take a
=PORT=---which we've defined earlier---as a parameter, and a callback for on
success.  01:42 We'll simply say "Server is running on port", and we'll specify
the =PORT= number here.  You now have your first express server.

#+name:app-listen
#+begin_src js +n
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}.`);
});
#+end_src

**** Testing the Server

This Makefile sets up some commands to run specific lessons.  Each lesson's
server can be started by moving into the root directory (~egghead-jwt-auth/~)
and typing:
: make lesson# where =#= is one of 1..8.

Thereafter, specific commands can be run from a different terminal, such as:
: make open-browser-status

#+BEGIN_SRC sh :mkdirp yes :tangle egghead-jwt-auth/Makefile
FORCE:

.phony : lesson1
lesson1 : FORCE
	node lesson1

#+END_SRC

01:53 If we go back to our terminal, we can start the server by using Node from
the root directory:
: make lesson1

We've got our server running.

These three Makefile rules provide easy commands to open different routes in
your default browser:

#+BEGIN_SRC sh :tangle egghead-jwt-auth/Makefile
.phony: open-browser
open-browser :
	open http://localhost:8888/

.phony: open-browser-status
open-browser-status :
	open http://localhost:8888/status/

.phony: open-browser-random
open-browser-random :
	open http://localhost:8888/random/

#+END_SRC

#+CINDEX:page not found error
02:02 Now if we go through our browser window, we can type in the
~localhost:8888~.  We'll get a 'page not found' because that route was not
defined.
: make open-browser

#+CINDEX:status route
02:10 We can use =/status= to get the server time, and any other page will give
us a =404= error.
: make open-browser-status
: make open-browser-random

That's it.  You've got your first Express server up and running.
**** Express Server Index.js Code
#+caption:Lesson 1 ~index.js~
#+name:lesson01-index.js
#+begin_src js -n :tangle egghead-jwt-auth/lesson1/index.js :mkdirp yes :noweb yes
<<require-express>>
<<app-express>>
<<port-8888>>

<<status-route>>
<<catchall-route>>

<<app-listen>>
#+end_src

*** Lesson 2---Set the Server Port in Express Using an Environment Variable
#+CINDEX:environment variables
In this lesson we learn how to use an environment variable to set the port of
an express server.

**** Use ~process.env~ to Set the =PORT= Variable
#+CINDEX:@code{process.env}
#+CINDEX:@code{PORT} environment variable, set
00:00 We'll change the =PORT= that this server is using.  We'll use
~process.env~ to access the environment variables from our ~index.js~, and then
we'll create a new variable called =PORT=.  If the =PORT= environment variable
is not defined, we'll still use =8888= as a default.

: index.js
: ----------
#+name:port-env-or-assign
#+begin_src js -n
const PORT = process.env.PORT || 8888;
#+end_src

**** Testing the =PORT= Assignment
00:15 If you run this server, we see that the server is running on =port 8888=.
If we do an ~export~ in our terminal and we set the =PORT= environement
variable for our operating system to say =3000=
: export PORT=3000
{{{noindent}}}and we run this server again, we can see that the server is now
running on ~port 3000~.

00:34 If we open our browser, we go to =localhost:8888=, it can't be
reached.  If we go to =3000=, we're getting a =404= in this case.  If we go to
=localhost:3000/status=, we are getting the server time.

00:48 That's how you set the =PORT= inside an environment variable.

**** Lesson 2 ~index.js~ Code
#+caption:Lesson 2 ~index.js~
#+name:lesson2-index.js
#+begin_src js -n :tangle egghead-jwt-auth/lesson2/index.js :mkdirp yes :noweb yes
<<require-express>>
<<app-express>>
<<port-env-or-assign>>

<<status-route>>
<<catchall-route>>

<<app-listen>>
#+end_src

{{{heading(Adding a Makefile Rule for Lesson 2)}}}

From within the root directory (~egghead-jwt-auth/~) run the command:
: make lesson2
to start the server.  Then type:
: open-browser-3000
: open-browser-status-3000
: open-browser-random-3000
to test.

#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : lesson2
lesson2 : FORCE
	(export PORT=3000; node lesson2)
.phony : open-browser-3000
open-browser-3000 :
	open http://localhost:3000/
.phony : open-browser-status-3000
open-browser-status-3000 :
	open http://localhost:3000/status/
.phony : open-browser-random-3000
open-browser-random-3000 :
	open http://localhost:3000/random/
#+end_src

*** Lesson 3---Add a =POST= Route To Express And Parse the Body
#+CINDEX:POST requests
#+CINDEX:@code{body-parser}
In this lesson, we see how to handle =POST= requests on our server and we
extract the data that was passed in the body of the requests using
~body-parser~.

**** Add a =POST= Method to ~index.js~
#+CINDEX:POST method
#+CINDEX:user login
#+CINDEX:login route
00:01 In order to handle our first post request, we will use Express' =POST=
method.  We will create a route that handles user logins.

#+CINDEX:request
#+CINDEX:response
00:08 The first argument is a route, which is =/login= in our case.  The second
argument is a callback with the =request= and =response= arguments.

#+CINDEX:username property
#+CINDEX:JSON object
#+CINDEX:post login route
00:15 Let's now define a constant that will contain the name of the user that
was posted to this route.  The constant name =user= will have the value of the
=username= property that was passed in our =request= as a JSON object.

#+name:post-route
#+begin_src js -n
app.post("/login", (req, res) => {
    const user = req.body.username;

#+end_src

**** Add ~body-parser~ Middleware
#+CINDEX:middleware, body-parser
#+CINDEX:body-parser middleware
00:27 At this point, Express can't read the body of the request.  We will need
to ~require~ an additional middleware called ~body-parser~.

#+name:require-body-parser
#+begin_src js -n
const bodyParser = require("body-parser");
#+end_src

We also go into the terminal to install this new library.

#+name:install-body-parser
#+begin_src sh :dir egghead-jwt-auth :results output :exports both
yarn add body-parser
#+end_src

: package.json
: ------------
#+begin_src sh :dir egghead-jwt-auth :results output :exports results
cat package.json
#+end_src

#+CINDEX:use method, express
#+CINDEX:JSON responses
00:40 Now that it's installed, we can add the middleware to Express using the
=use= method.  We will specify that it will handle JSON responses.

#+name:app-use-body-parser
#+begin_src js -n
app.use(bodyParser.json());
#+end_src

**** Build the =response=
#+CINDEX:response, post request
#+CINDEX:200 status
#+CINDEX:status 200
#+CINDEX:success status 200
00:49 We are now able to read the =request= body, so our constant contains the
=username= that was passed into login route.  We are ready to build our
=response=, which has a status of =200= because this is a success.

01:01 We will send back a simple string that says, "You logged in with
username: ${user}".  It will display the =username= that we just received.

#+name:post-route-res
#+begin_src js -n
    res
    .status(200)
    .send(`You logged in with username: "${user}"`);
});
#+end_src

**** Start the Server
01:08 Let's start our server using ~node~.  From the root directory type:
: make lesson3

#+name:Makefile
#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : lesson3
lesson3 : FORCE
	(export PORT=3000;node lesson3)
#+end_src

The server is now listening on =localhost:3000=, which was defined as an
environment variable previously.

**** Test the Server
#+CINDEX:Postman
#+CINDEX:@command{curl}
01:18 To test this new route, we can use Postman (or ~curl~).  If we try to do
a =GET= request to =/status=, we should get the local time:
: make open-browser-status-3000

#+CINDEX:POST request
#+CINDEX:@code{username} property
#+CINDEX:Content-Type
#+CINDEX:application/json
01:28 Now, we can do a =POST= request to the =/login= route.  Let's start by
specifying the body of our request.  It will be a JSON object with a =username=
property.  Make sure that you change the Content-Type to =application/json=.

#+name:Makefile
#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : post-login
post-login : FORCE
	curl \
	  --header Content-Type:application/json \
	  --data   '{"username":"admin"}' \
	  http://localhost:3000/login \
#+end_src

#+CINDEX:parse POST request
01:43 If we run this, you get a, "You logged in with username: \"admin\""
message.  That is how you parse a =POST= request and handle the =request= data.

**** Lesson 3 ~index.js~ Code
#+caption:Lesson 3 ~index.js~
#+name:lesson3-index.js
#+begin_src js :tangle egghead-jwt-auth/lesson3/index.js :mkdirp yes :noweb yes
<<require-express>>
<<require-body-parser>>

<<app-express>>
<<app-use-body-parser>>

<<status-route>>
<<post-route>>
<<post-route-res>>
<<catchall-route>>

<<port-env-or-assign>>
<<app-listen>>
#+end_src

*** Lesson 4---Provide Users With A JSON Web Token
#+CINDEX:token issuer
#+CINDEX:JSON web token
In this lesson, we will build a token issuer that will return a JSON Web
Token.  This simple server will have a single endpoint for login that queries a
list of users and returns a web token for the matching user.

**** The User Database
#+CINDEX:authentication server
#+CINDEX:user database
#+CINDEX:user array
00:00 Since this lesson is all about creating an authentication server, let's
start by creating a user database.  We will use a user array that contains all
of our users and store the passwords in plain text right now.

#+CINDEX:warning
00:11 Warning, do not do this in production.  You should always encrypt
passwords and ensure that no sensitive information about your users is
accessible to potential hackers.  For the sake of this lesson, let's just do it
this way.

#+name:users-array
#+begin_src js -n
const users = [
    {id: 1, username: "admin", password: "admin"},
    {id: 2, username: "guest", password: "guest"}
];
#+end_src

**** Authentication Route
#+CINDEX:@code{/login} route
#+CINDEX:@code{POST} request
#+CINDEX:user authentication
00:26 We can now start with our =/login= =POST= request.  This is the request
that will handle user authentication.  The first thing to check is if the
request is formatted correctly.  We are expecting both a username and a
password.

#+CINDEX:400 status
#+CINDEX:status 400
#+CINDEX:invalid request, status 400
00:45 If we don't have both, we =return= a status code of =400= for invalid
request, and we =send= a message to the user, saying that "You need a username
and password".  We can then do a ~return~ to stop the execution of this
callback.

#+CINDEX:@code{find} method
01:08 Now, if we have a valid request, we need to check if the user is in our
database.  Using the =find= method, we will check if we have a user that has a
=username= and =password= that matches those in the =request=.

#+CINDEX:401 status
#+CINDEX:status 401
#+CINDEX:unauthorized request
01:20 If we find a matching user, it will be stored in a constant, ~user~.  If
we can't find a matching user, we can send a response with the status of =401=
for =unauthorized=.  We can also ~send~ a message to the user, saying "User not
found".  Once again, we ~return~ to stop the execution of this callback.

#+name:authentication-login
#+begin_src js -n
app.post("/login", (req, res) => {
    if (!req.body.username || !req.body.password) {
        res
        .status(400)
        .send("You need a username and password");
        return;
    }

    const user = users.find((u) => {
        return u.username === req.body.username && u.password === req.body.password;
    });

    if (!user) {
        res
        .status(401)
        .send("User not found");
        return;
    }

#+end_src

**** Create a JWT for a Valid User
#+CINDEX:JSON web token
01:45 If we have a valid user, we will send back a JSON web token as a
response.

#+CINDEX:@code{jsonwebtoken} library
In order to do so, we will need to ~require~ the ~jsonwebtoken~ library.  We will
also need to install it using ~yarn add jsonwebtoken~.

#+name:require-jsonwebtoken
#+begin_src js -n
const jwt = require("jsonwebtoken");
#+end_src

#+begin_src sh :dir egghead-jwt-auth :results output :exports both
yarn add jsonwebtoken
#+end_src

: package.json
: ------------
#+begin_src sh :results output :exports both :dir egghead-jwt-auth
cat package.json
#+end_src

#+CINDEX:@code{sign} method
#+CINDEX:sign token
#+CINDEX:payload
#+CINDEX:secret key
02:13 Now that it's installed, we can use the =sign= method to create a sign
token.  We start by passing the payload we want to attach in the =jwt=.  We
then pass a string which is the =secret key=.  In this case, it's
"mysupersecretkey".

#+CINDEX:options
#+CINDEX:access_token
02:34 Finally, we can pass some options like in how much time this token will
expire, so we'll say expires in three hours for us.  Finally, we can send back
our response with a status of =200= and a JSON object with our =access_token=.

#+name:create-access-token
#+begin_src js -n
      const token = jwt.sign(
        {
          sub: user.id,
          username: user.username
        }, "mysupersecretkey", {expiresIn: "3 hours"}
      );

      res
       .status(200)
       .send({access_token: token});
  });
#+end_src

**** Testing the Lesson 4 Server
#+CINDEX:authentication server, run
03:01 We can now run the authentication server using node and the name of the
file.

#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : lesson4
lesson4 : FORCE
	(export PORT=3000;node lesson4)
#+end_src

Let's now open Postman (use ~curl~) to test this out.

03:10 If we try a =GET= request on the server, we're getting a =404= because we
haven't defined any =GET= route on the server.

#+begin_src sh :dir egghead-jwt-auth
make open-browser-status-3000
#+end_src

Let's change that to a =POST= and use the =/login= endpoint that we just
created.  Sending a ~request~ to that URL without a body will give us a =400= with a
message, "You need a username and password."  Let's try to add those.

#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : wrong-auth-login
wrong-auth-login :
	curl \
	  --header Content-Type:application/json \
	  --data   '{"username":"Felix","password":"the-cat"}' \
	  http://localhost:3000/login \

.phony : auth-login
auth-login :
	curl \
	  --header Content-Type:application/json \
	  --data   '{"username":"admin","password":"admin"}' \
	  http://localhost:3000/login \

#+end_src

03:29 For the =body=, select =raw= and make sure that the =type= is set to
=application/json=.  You can now type in a =username= and =password= in JSON
format.  If we type a wrong password, we should be getting the "User not found"
message.  If we fix the password to use the right one, we get our JSON object
with an =access_token=.

03:56 You can copy and paste this JSON web token in a website like ~jwt.io~ and
you will be able to see the content.  If you try it with another user like
=guest=, you will get a different =access_token=, and if we go into ~jwt.io~,
we can once again see all of the content and we can see that it's different
this time.

04:28 That's it.  You have now created your first authentication server.

**** Lesson 4 ~index.js~ Code
#+caption:Lesson 4 ~index.js~ Code
#+name:lesson4-index.js
#+begin_src js :tangle egghead-jwt-auth/lesson4/index.js :mkdirp yes :noweb yes
<<require-express>>
<<require-body-parser>>
<<require-jsonwebtoken>>

<<app-express>>
<<app-use-body-parser>>
<<users-array>>

<<status-route>>
<<authentication-login>>
<<create-access-token>>
<<catchall-route>>

<<port-env-or-assign>>
<<app-listen>>
#+end_src

*** Lesson 5---Allow CORS in Node.js and Expres
In this quick lesson, we see how to add the CORS middleware so that our Express
server can handle requests from different origins.

**** The CORS Prohibition
#+CINDEX:CORS prohibition
00:00 If you have an API that runs on a different server or even a different
port than your application, and you try to do a ~fetch~, you should see a
message in your console complaining about
=Access-Control-Allow-Origin=.[fn::Safari allows such a fetch, but Google
Chrome does not.]

[[file:./resources/cors-error-50.png]]

**** The Fix to the CORS Prohibition
00:19 The fix for this in your Express server is very simple.

#+CINDEX:@code{cors} library
First of all, you need to require the CORS library:

#+name:require-cors
#+begin_src js -n
const cors = require("cors");
#+end_src

Secondly, you need to tell your Express server to use this middleware by using
~app.use~ and the library that we've just installed.

#+name:app-use-cors
#+begin_src js +n
app.use(cors());
#+end_src

#+CINDEX:@code{express-jwt} library
Thirdly, use a different JSON web token library, ~express-jwt~, which the author
does not explain here, but explains in the next lesson.

#+name:require-expressjwt
#+begin_src js +n
const expressjwt = require("express-jwt");
#+end_src

#+name:jwtCheck
#+begin_src js +n
const jwtCheck = expressjwt({secret: "mysupersecretkey"});
#+end_src

<<add-express-jwt>>You'll also need to install both using ~yarn add~:

#+begin_src sh :dir egghead-jwt-auth :results output :exports both
yarn add cors express-jwt
#+end_src

Our ~package.json~ now looks like this:

: package.json
: ------------
#+begin_src sh :dir egghead-jwt-auth :results output :exports results
cat package.json
#+end_src

**** Start Lesson 5 Server Running
00:46 Now, if you restart your server and try the same ~fetch~ call in your
browser, you won't have that CORS error any more.

Start the server for this lesson with:
: make lesson5

#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : lesson5
lesson5 : FORCE
	(export PORT=3000;node lesson5;)
#+end_src

[[file:./resources/cors-fix-50.png]]

**** Set Up Two New Routes for Public and Private Resources
Two new routes will be added here, and explained in the next lesson.

#+name:public-resource-route
#+begin_src js -n
app.get("/resource", (req, res) => {
    res
    .status(200)
    .send("Public resource; okay to see");
});

#+end_src

#+name:private-resource-route
#+begin_src js +n
app.get("/resource/secret", jwtCheck, (req, res) => {
    res
    .status(200)
    .send("Secret resource; you should be logged in to see this.");
});

#+end_src

**** Lesson 5 ~index.js~ Code
Here is the code for Lesson 5 in ~index.js~.  The two routes will be explained
in the next lesson.

#+name:Lesson5-index.js
#+begin_src js :tangle egghead-jwt-auth/lesson5/index.js :mkdirp yes :noweb yes
<<require-express>>
<<require-body-parser>>
<<require-cors>>
<<require-expressjwt>>
<<jwtCheck>>

<<app-express>>
<<app-use-body-parser>>
<<app-use-cors>>

<<public-resource-route>>
<<private-resource-route>>
<<catchall-route>>

<<port-env-or-assign>>
<<app-listen>>
#+end_src

*** Lesson 6---Authenticate Users With JWT for Access to Protected Resources
In this lesson, we build a simple API with two endpoints, one public and one
secure.  Using JWT and validating with the signature, we ensure that the user is
authorized and has access to a protected resource before serving it.

**** Create Two Resource Routes
00:00 In this lesson, we will create an API with two routes.  The first one for
the ~/resource~ endpoint will be public, and simply return a status of =200=, and
a message saying, "Public resource, you can see this".

#+begin_src js -n :noweb yes
<<public-resource-route>>
#+end_src

00:22 Our second route will be for the ~/resource/secret~ endpoint.  This will
be a secured route.  For this endpoint, we will return a =200=, as well as a
message that says, "Secret resource, you should be logged in to see this."

#+begin_src js +n :noweb yes
<<private-resource-route>>
#+end_src

**** Create an =API_PORT= Environment Variable
00:42 This server will run on the port specified by the environment variable
=API_PORT=.  Let's go into our terminal, set this using ~export~, and set the
=API_PORT= to =5000=.  Now, we can run the server by using ~node~ and the name
of the file.
: make lesson6

#+name:api-port
#+begin_src js -n
const API_PORT = process.env.API_PORT;
#+end_src

#+name:app-listen-api-port
#+begin_src js +n
app.listen(API_PORT, () => console.log(`API Server is running on port ${API_PORT}`))
#+end_src

#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : lesson6
lesson6 : FORCE
	(export API_PORT=5000;node lesson6;)
#+end_src

**** Test the Server
01:00 To test our API, we will use Postman.  If we go to ~localhost:5000~,
we're getting a =404=, =page not found=, because that route was not defined.  If we
try ~localhost:5000/resource~, we should see our public resource there.  If we try
~localhost:5000/resource/secret~, we can also see the content of this resource.

**** Block the Secret Resource Route
#+CINDEX:@code{express-jwt}
#+CINDEX:block protected routes
#+CINDEX:middleware
Our next step will be to block those requests by requesting a valid JSON web
token.  To do so, we will require the ~expressjwt~ middleware.

#+begin_src js :noweb yes
<<require-expressjwt>>
#+end_src

01:39 Let's now open a terminal, and install it, using ~yarn~[fn::this was done
in the prior lesson] [[add-express-jwt][express-jwt]].

#+CINDEX:@code{express-jwt} initialization
Good.  Now, let's define this middleware.  We can initialize this middleware by
using ~expressjwt~ and passing it some options.  If you are using a real
authentication server, you'd want to check for the =issuer=, the =audience=,
and more to validate the integrity of the server.

02:01 In our case, we will only check to see if the signature matches the one
from our authentication server, "mysupersecretkey", in this case.

#+begin_src js -n :noweb yes
<<jwtCheck>>
#+end_src

Finally, we can secure our private route by adding the middleware as the second
argument of our =app.get= method.

#+begin_src js -n :noweb yes
<<private-resource-route>>
#+end_src

**** Testing the Server with a Protected Route
We are now ready to restart our server and test it in Postman.

02:24 Now, if we try a protected route again, we see that we're getting an
error message, saying that no authorization token was found.

[[file:./resources/postman-unauthorized-get-40.png]]

Let's go to the Authorization section, and select a =Bearer Token= type of
authentication.

[[file:./resources/bearer-token-authentication-type-50.png]]

02:38 We can take a valid token from ~jwt.io~ in this case[fn::After first
entering the secret key "mysupersecretkey" in the =verify signature= box
[[file:./resources/jwt.io-secret-key-25.png]]], and simply paste that in the token
box in Postman.
: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikp\
: vaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.oGFhqfFFDi9sJMJ1U2dWJZNYEiUQBEtZRVuwKE7Uiak

We can now try to make our call to =/resource/secret= again, and we can now see
the content of this route.  Now, you have an API with a secured endpoint.

[[file:./resources/postman-with-bearer-token-40.png]]

**** Lesson 6 ~index.js~ Code

#+caption:Lesson 6 ~index.js~ Code
#+name:Lesson6-index.js
#+begin_src js :tangle egghead-jwt-auth/lesson6/index.js :noweb yes :mkdirp yes
<<require-express>>
<<require-body-parser>>
<<require-cors>>
<<require-expressjwt>>
<<jwtCheck>>

<<app-express>>
<<app-use-cors>>
<<app-use-body-parser>>

<<public-resource-route>>
<<private-resource-route>>
<<catchall-route>>

<<api-port>>
<<app-listen-api-port>>
#+end_src

*** Lesson 7---Connect a Front-End to a Secure API using JWTs
In this lesson, we add the login form to a single page application and we pass
our tokens to the API.  Should the token be valid, we will have access to the
data from the secure endpoint in the API.

**** The Single Page Application
#+name:index.html
#+begin_src html -n :tangle egghead-jwt-auth/lesson7/index.html :mkdirp yes
<html>
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
</head>

<body>
<div class="container container-fluid">
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Secure your SPA</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active" data-route="#">
                    <a class="nav-link" href="#">Home</a>
                </li>
            </ul>
            <form class="form-inline">
                <button class="btn btn-outline-success my-2 my-sm-0" data-toggle="modal" data-target="#loginModal" type="button" id="loginModalBtn">Login</button>&nbsp;
                <button class="btn btn-outline-danger d-none" id="logoutBtn">Logout</button>
            </form>
        </div>
    </nav>

    <span id="mainPage">

        <div class="row">
            <div class="col-1"></div>
            <div class="col-10 text-center">
                <p>Welcome to the headline generator application.  Click on the buttons to get a headline</p>
            </div>
            <div class="col-1"></div>
        </div>

        <div class="row">
            <div class="col-12 text-center">
                <button class="btn btn-lg btn-primary" id="headline">Public</button>&nbsp;
                <button class="btn btn-lg btn-secondary" id="secret">Private</button>
            </div>
        </div>

        <div class="row">&nbsp;</div>

        <div class="row">
            <div class="col-2"></div>
            <div class="col-8">
                <div class="alert alert-dark" style="overflow-wrap: break-word">
                    Test the API
                </div>
            </div>
            <div class="col-2"></div>
        </div>

        <div class="row justify-content-center">
            <div class="col-4 text-center">
                <img src="http://http.cat/200" id="httpcat" width="350px"/>
            </div>
        </div>
    </span>

    <span id="secretPage" class="d-none">
        This is a secret area!
    </span>

    <span id="unauthorizedPage" class="d-none">
        You are not authorized to see this page.
    </span>
</div>

<div class="modal fade" id="loginModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="loginModalLabel">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="username">Username</label>
                        <input type="text" class="form-control" id="username">
                    </div>
                    <div class="form-group">
                        <label for="password">Password</label>
                        <input type="password" class="form-control" id="password">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" id="loginBtn">Login</button>
            </div>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>

<script src="./ui-update.js"></script>
<script src="./index.js"></script>
</body>
</html>
#+end_src

**** The Helper Functions in UI-Update
#+name:ui-update.js
#+begin_src js -n :tangle egghead-jwt-auth/lesson7/ui-update.js :mkdirp yes
let UIUpdate = {};

UIUpdate.loggedIn = function(token) {
  UIUpdate.alertBox(`Just logged in<br>Token:<br>${localStorage.getItem("access_token")}`);
  loginModalBtn.classList.add("d-none");
  logoutBtn.classList.remove("d-none");
};

UIUpdate.loggedOut = function() {
  localStorage.removeItem("access_token");
  loginModalBtn.classList.remove("d-none");
  logoutBtn.classList.add("d-none");
};

UIUpdate.routeChange = function() {
  if (document.querySelector(".navbar-nav li.active")) {
    document.querySelector(".navbar-nav li.active").classList.remove("active");
  }
  document.querySelector(".navbar [data-route='#" + window.location.hash.replace("#", "") + "']").classList.add("active");
};

UIUpdate.updateCat = function(status) {
  const httpCat = document.querySelector("#httpcat");
  httpCat.src = "http://http.cat/" + status;
};

UIUpdate.alertBox = function(message) {
  const alertBox = document.querySelector(".alert");
  alertBox.innerHTML = message;
};

UIUpdate.getUsernamePassword = function() {
  return {
    username: document.querySelector("#username").value,
    password: document.querySelector("#password").value
  }
};

window.addEventListener("hashchange", UIUpdate.routeChange);
#+end_src

**** The Authentication Server
#+name:auth.js
#+begin_src js -n :tangle egghead-jwt-auth/lesson7/auth.js :mkdirp yes :noweb yes
<<require-express>>
<<require-body-parser>>
<<require-jsonwebtoken>>
<<require-cors>>
<<users-array>>

<<app-express>>
<<app-use-body-parser>>
<<app-use-cors>>

<<authentication-login>>
<<create-access-token>>
<<catchall-route>>

<<port-env-or-assign>>
<<app-listen>>
#+end_src

**** The API Server
#+name:api.js
#+begin_src js -n :tangle egghead-jwt-auth/lesson7/api.js :mkdirp yes :noweb yes
<<require-express>>
<<require-body-parser>>
<<require-cors>>
<<require-expressjwt>>
<<jwtCheck>>

<<app-express>>
<<app-use-body-parser>>
<<app-use-cors>>

<<public-resource-route>>
<<private-resource-route>>
<<catchall-route>>

<<api-port>>
<<app-listen-api-port>>
#+end_src

**** Install Static Server ~httpster~
To set up a static file server for the front end, install ~httpster~ from NPM.
To start the server using =PORT 5000=, use
: yarn run httpster -p 5000 -d lesson7
from inside the root directory (~egghead-jwt-auth/~).

To start all of the servers (~auth~, ~api~, and ~frontend~), run the ~make~
command ~make lesson7~.  To terminate all of the servers, run the ~make~
command ~make kill~.  The ~auth~ server will run on =PORT 3000= while the ~api~
server will run on =PORT 3333=.

#+begin_src sh :results output :exports both :dir egghead-jwt-auth
yarn add httpster --dev
#+end_src

: package.json
: ------------
#+begin_src sh :results output :exports both :dir egghead-jwt-auth
cat package.json
#+end_src

#+begin_src sh :tangle egghead-jwt-auth/Makefile
.phony : lesson7
lesson7 : FORCE
	yarn run httpster -d lesson7 -p 5000 &
	export PORT=3000;node lesson7/auth.js &
	export API_PORT=3333;node lesson7/api.js &

.phony : kill
kill :
	pkill node
#+end_src

**** Framework of the Front End Connection
#+name:index.js
#+begin_src js -n :noweb tangle :tangle egghead-jwt-auth/lesson7/index.js
/* To run this file on a server, we are using httpster.
Type `httpster index.html -p 5000` in your console to start the server. */

<<api-url>>
<<auth-url>>

<<access-token>>

const headlineBtn = document.querySelector("#headline");
const secretBtn = document.querySelector("#secret");
const loginBtn = document.querySelector("#loginBtn");
const logoutBtn = document.querySelector("#logoutBtn");

<<headlineBtn.addEventListener>>

<<secretBtn.addEventListener>>

<<loginBtn.addEventListener>>

<<logoutBtn.addEventListener>>

#+end_src
**** Connect the Front End to the API Server
#+CINDEX:api server
00:00 To connect our front-end to our API in our authentication server, we
first need the URL for those.  In this case, I started the API on port 8888, so
we can add that to a constant.

#+name:api-url
#+begin_src js
const API_URL = "http://localhost:3333";
#+end_src

#+CINDEX:authentication server
00:18 The authentication server is also running at =http://localhost:3000=.
Let's add this to the =AUTH_URL= constant.

#+name:auth-url
#+begin_src js
const AUTH_URL = "http://localhost:3000";
#+end_src

#+CINDEX:@code{ACCESS_TOKEN}
We will keep the =ACCESS_TOKEN= from our authentication server stored in
memory.  For now, we can initialize the =ACCESS_TOKEN= constant to =undefined=.

#+name:access-token
#+begin_src js
let ACCESS_TOKEN = undefined;
#+end_src

**** Look at the Prebuilt Front End
#+CINDEX:front end
#+CINDEX:jumbotron
#+CINDEX:AJAX calls
00:36 Let's take a look at the front-end that was pre-built for us.  There is a
button labeled =public=, and another labeled =private=.  They will both update
the jumbotron beneath it with the response that we're getting from our AJAX
calls.

[[file:./resources/prebuilt-frontend-25.png]]

#+CINDEX:helper functions
#+CINDEX:@code{UI_Updates}
00:50 The image of the cat will also be updated with the status code that we
are getting from the server.  For the =UIUpdate= functions, all of the helper
functions are already created.  We will focus on the actual logic in here.

**** Set Up Buttons in Front End

{{{heading(The PUBLIC Button)}}}

#+CINDEX:public button
01:03 For now, none of the buttons do anything.  Let's go back to our code in
~index.js~.

#+CINDEX:@code{/resource} endpoint
#+CINDEX:API server
The variable =headlineBtn= holds a reference to the button labeled =public=.
We will start by doing a ~fetch~ to our public ~/resource~, which is on the API
server at the ~/resource~ endpoint.

#+CINDEX:@code{fetch}
#+CINDEX:promise, from @code{fetch} call
01:23 ~fetch~ returns a promise, so we will use the ~then~ method with the
response and we will return the result of =resp.text=.  This will return the
actual data in text format to the next chained ~.then~ method.

#+CINDEX:jumbotron
#+CINDEX:@code{UI_Update} object
01:40 Finally, we can use the =UIUpdate= object and the ~alertBox~ method to update
the jumbotron with the data from our response.

#+name:headlineBtn.addEventListener
#+begin_src js -n
  headlineBtn.addEventListener("click", () => {
          fetch(`${API_URL}/resource`).then(resp => {
              UIUpdate.updateCat(resp.status);
              return resp.text();
          }).then(data => {
              UIUpdate.alertBox(data);
          });
  });
#+end_src

{{{subheading(Test the PUBLIC Button)}}}

01:51 We are ready to test our first AJAX call.  Clicking on the =public=
button shows the public resource.  You can see this message.  That works.

{{{heading(The PRIVATE Button)}}}

#+CINDEX:private button
02:00 Let's now move on to the second button, the one labeled =private=.  In
here, we will do a very similar code.  We start by doing a ~fetch~ to the
=API_URL= and ~/resource/secret~ URL.  We return the ~.text~ from the response
and we update our jumbotron the same way we did for the public button.

#+begin_src js -n
  secretBtn.addEventListener("click", (event) => {
          fetch(`${API_URL}/resource/secret`).then(resp => {
              UIUpdate.updateCat(resp.status);
              return resp.text();
          }).then(data => {
              UIUpdate.alertBox(data);
          });
  });
#+end_src

{{{subheading(Test the PRIVATE Button)}}}

#+CINDEX:authorization header
02:25 If we go and test this, we will see that we are getting an error message
instead of the actual response that we are expecting.  That is due to the fact
that we have not passed in an authorization header.

#+CINDEX:@code{UIUpdate.updateCat} method
#+CINDEX:@code{resp.status} code
02:35 Now that we know that this URL will sometimes return us an error code,
let's update our =httpCat= with the response that we get from the server.
Before we return the parse body of our response, we can use the
=UIUpdate.updateCat= method with the =resp.status= code.

#+begin_src js
  secretBtn.addEventListener("click", (event) => {
          fetch(`${API_URL}/resource/secret`).then(resp => {
              UIUpdate.updateCat(resp.status);
              return resp.text();
          }).then(data => {
              UIUpdate.alertBox(data);
          });
  });
#+end_src

#+CINDEX:401 error code
#+CINDEX:unauthorized access
02:52 If we try this again, we see that we're getting a =401=, which is the error
code for an =unauthorized access=.

**** Authentication
#+CINDEX:authenticate
#+CINDEX:login
#+CINDEX:@code{LOGIN} button
#+CINDEX:authorization server
03:00 Before we can pass in a token with our request, we will need to
authenticate.  Let's go to the =login= button click event listener and do a
=POST= request to our authorization server.

#+CINDEX:Content-Type
#+CINDEX:application/json
#+CINDEX:request headers
#+CINDEX:headers, request
#+CINDEX:accept header
03:12 In here, we will do a request to the =${AUTH_URL}/login= endpoint.  We
will also specify a few options with our request.  First, this is not a =GET=,
so we will need to add method =POST=; then we need to specify the headers to
tell our server that we are sending =Content-Type:"application/json"=.

#+CINDEX:@code{UIUpdate} helper object
03:31 We need to specify that we are ~accepting~ a response type of
"application/json".  The body of our request will be the =username= and
=password= in JSON format provided by our =UIUpdate= helper object.

#+CINDEX:@code{httpCat}
03:47 We will update our =httpCat= with the ~resp.status~ code.  If we get a
=200=, we will send the JSON object from our response to the next promise.  If
our response was anything else, we will use the text of the response.

#+CINDEX:@code{ACCESS_TOKEN}
04:01 We can then chain with another ~.then~ and verify the presence of an
=ACCESS_TOKEN=.  If we have one, we can store the =ACCESS_TOKEN= in the
=ACCESS_TOKEN= variable that we defined in the beginning.

#+CINDEX:@code{UIUpdate.loggedIn} method
04:22 We can also overwrite the content of data with =ACCESS_TOKEN=: and the
content of the token.  If we have an =ACCESS_TOKEN=, this means that we are
logged in, so we can use the ~UIUpdate.loggedIn~ method to update our UI.

#+CINDEX:jumbotron
04:43 Finally, we will update our jumbotron with our data variable.

#+name:loginBtn.addEventListener
#+begin_src js -n
  loginBtn.addEventListener("click", (event) => {
      fetch(`${AUTH_URL}/login`, {
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "accept": "application/json",
          },
          body: JSON.stringify(UIUpdate.getUsernamePassword())
      }).then(resp => {
          UIUpdate.updateCat(resp.status);
          if (resp.status == 200) {
              return resp.json();
          } else {
              return resp.text();
          }
      }).then(data => {
          if (data.access_token) {
              ACCESS_TOKEN = data.access_token;
              data = `Access Token: ${data.access_token}`;
              UIUpdate.loggedIn();
          }
          UIUpdate.alertBox(data);
      });
  });
#+end_src

**** Test the Authentication Login
Let's try this out.

#+CINDEX:400 status
#+CINDEX:bad request, 400
04:54 If we click on =login=, we have a modal asking for our credentials.  If we
enter nothing, we are getting a =400= bad request error with the message, "You
need a username and password."

#+CINDEX:401 status
#+CINDEX:unauthorized error
05:05 Let's try to enter =username= "admin", and an invalid password.  This
time, we are getting a =401= =unauthorized= with the message, "User not found."

#+CINDEX:access token, receive
Now, if we use the right =username= and =password= combination, we are getting
an access token.

#+CINDEX:@url{jwt.io}
05:20 If we copy and paste the access token in ~jwt.io~, we can see the content
of the token.  It has the right username.

05:30 Back to our application, if we click on =private=, we are still getting a
"No authorization token was found" error message.  That's because we are still
not passing a token with our request.

**** Set Up Authentication to the Private Route
#+CINDEX:headers, request
#+CINDEX:@code{secretBtn}
05:43 Back to the =secretBtn=, let's start by defining our headers.  We can
start by initializing with an empty object, then we test to see if =ACCESS_TOKEN=
is still =undefined= or if we have an =ACCESS_TOKEN= stored there.

#+CINDEX:bearer token
05:58 If we do, we can specify the headers.  We will add an "Authorization" with
the value of =Bearer= followed by a space, and then =${ACCESS_TOKEN}=.

06:13 Now, we can add those through our request as a second argument to our
~fetch~.

#+name:secretBtn.addEventListener
#+begin_src js -n
secretBtn.addEventListener("click", (event) => {
	let headers = {};
	if (ACCESS_TOKEN) {
		headers = {
			"Authorization": `Bearer ${ACCESS_TOKEN}`
		};
	}
	fetch(`${API_URL}/resource/secret`, { headers }).then(resp => {
		UIUpdate.updateCat(resp.status);
		return resp.text();
	}).then(data => {
		UIUpdate.alertBox(data);
	});
});
#+end_src

**** Test Authentication to Private Resource Route
Let's test this out.  Start by refreshing the app, and then log in using =admin=
and the valid password.

#+CINDEX:secret resource
06:27 Now, if you click on =private=, you'll get the secret resource.  You should
be logged in to see this message.  We now have access to our secret resource.

**** Log Out Procedure
#+CINDEX:@code{logoutBtn}
#+CINDEX:@code{UIUpdate.loggedout} method
06:36 Finally, we will need a way to log out.  If we go to the =logoutBtn= "click"
event handler, we can simply reset our =ACCESS_TOKEN= to =undefined= and use the
~UIUpdate.loggedout~ method.

#+name:logoutBtn.addEventListener
#+begin_src js -n
logoutBtn.addEventListener("click", (event) => {
	ACCESS_TOKEN = undefined;
	UIUpdate.loggedOut();
});
#+end_src

06:51 One last time to our application, and we can now ~login~ using a valid
credential and get access to the =private= button.  Now, if you log out and try
the =private= button again, you're getting the =401= error with the "No
authorization token found" error message again.

07:09 That's it.  You now have a front-end that access both public and private
data from an API using a JSON web token.

*** Lesson 8---Authenticate Users in a Single Page Application with Auth0
In this lesson, we take the previous API and front-end and we convert them to
use Auth0 to replace our custom authentication server built in the previous
lessons.

00:00 Since this lesson is aimed at using Auth0 for authentication, the first
thing we'll need to do is to go to the [[https://auth0.com/][auth0.com]] website and create a free
account.

00:09 The sign-up process is fairly straightforward.  You can use an email and
password or you can use any of the social connections here.  This free account
will give you access to most of the Auth0 API for up to 7,000 users, which is
more than enough for the purpose of this lesson.

00:24 Once you're signed up, you can log into your account, and you will land
on this dashboard.  This shows you your active users and the number of logins
in the last few days.

00:34 From here, we'll want to go to the API section to create a new
entry.  This is what will be used to protect our API.

00:42 You can pick anything for the name.  Let's just use =egghead-demo=.  For
the identifier, you can use anything, but it is recommended that you use the
URL of your application.  In this case, we don't have a URL, so we'll just use
=egghead-demo= as well.

00:58 Finally, you will want to use =HS256= for the signing algorithm, because
this is what we used in the previous lesson.

Once you have this, you click on =create=, and the modal is closed, and you get
redirected to the quick start page.

01:11 If you look at this page, you get code examples on how to implement this
with your API.  As you can see, it uses the same middleware as we currently use,
the main difference being the settings for the middleware itself.

01:24 We will have a secret key, but we also check who is the token meant for,
the audience, and who created this token, the issuer.  Those are additional
checks that will make your API even more secure.

Let's now go back at our code editor and open ~api.js~.

01:41 You can simply change the settings of the middleware by pasting the
values you copied from the Auth0 website.  Note that those values will need to
be the ones from your Auth0 account.  If you try to copy the values that I just
pasted in, this won't work for you.

#+begin_src js -n
const jwtCheck = expressjwt({
  secret: 't2ABNgm7aB8YrMrnsutSB0bPNtLZbC7P',
  audience: 'secure-spa-auth0',
  issuer: "https://joel-1.auth0.com/"
});
#+end_src

01:56 We can now head to our terminal window and start our API server by
running ~node api~.  Your server is now running on port 8888.

If you try this now, nothing will work.  Your front end also needs to get a
token from Auth0.  Let's get back to our code and do those changes.

02:13 Because we won't be using our authorization server anymore, we can go
ahead and remove the ~auth.js~ file from this folder altogether.

It's now time to edit our ~index.html~ page to use Auth0's authentication server
instead of ours.

02:28 The first thing that we'll want to do is to remove the login modal.  We
will be using Auth0's login screen, so let's go to line 21 and remove those
data tags that were used to open the modal.

02:40 We can also rename this button to be =loginBtn= instead.

Since we won't be using the modal anymore, we can go down here and delete all
of the markup for our login modal.

02:55 We will use Auth0's library, which we will get from their CDN.  We can
add a script tag.  The source will be =https://cdn.auth0.com/js/auth0/=, the
version number, which is =9.5.1=, the latest at this moment, and finally
=/auth0.min.js=.
: <script src="https://cdn.auth0.com/js/auth0/9.5.1/auth0.min.js"></script>

03:21 Our ~index.html~ file is not ready, but to finish the UI changes, we will
need to go to the ~ui-update.js~ file and do a few minor changes in
there.  Instead of showing and hiding the login modal button, we will do that on
the =loginBtn=.  Let's change line 5 to use =loginBtn=, and same thing on
line 11.  We're almost done.

: ui-update.js
: ------------

#+begin_src js -n
UIUpdate.loggedIn = function(token) {
  UIUpdate.alertBox(`Just logged in<br>Token:<br>${ACCESS_TOKEN}`);
  loginBtn.classList.add("d-none");
  logoutBtn.classList.remove("d-none");
};

UIUpdate.loggedOut = function() {
  localStorage.removeItem("access_token");
  loginBtn.classList.remove("d-none");
  logoutBtn.classList.add("d-none");
};
#+end_src

03:44 Let's open our ~index.js~ file to change our code to use Auth0's
authentication server instead of the one we built.  In here, we will need to
use Auth0's =webAuth= object.  First, we need to get the settings for this
object.  Let's go back to Auth0's website and go into the =Applications=
section.

04:03 In here, we choose to create a new application.  We can name it whatever,
but we will use =egghead-demo= for consistency.  This application is of type
=single-page application=, so we can select this and click on create.

04:17 Similar to when we created the API, we get a screen that suggests us
various quick starts.  In here, you can find for most major JavaScript
frameworks, but we are going to use plain vanilla JavaScript here.

04:30 If you scroll down, you will find a section which has all of your
settings for your application.  Once again, make sure that you copy those from
your Auth0 account, and not those from this video.  Let's copy that and go back
to our code.

04:44 Now we can create a =webAuth= object using a new =auth0.WebAuth=, and we
can paste the settings we got from the quick start.

: index.js
: --------

#+begin_src js -n
let webAuth = new auth0.WebAuth({
  domain: 'joel-1.auth0.com',
  clientID: '8vXPduLlATyDg69DF13J7JY4xN2vveOG',
  responseType: 'token id_token',
  audience: 'https://joel-sandbox.auth0.com/userinfo',
  scope: 'openid',
  redirectUri: window.location.href
});
#+end_src

04:52 If you use Auth0's application with a default setting, it is =OpenID
Connect-enabled=, which is outside the scope of this lesson.  We will need to
tweak the settings of this application in order to be able to use it.

05:04 Going back to Auth0 and into the settings of our application, the first
thing that we will need to change is the Callback URL.

This is the page where users are redirected after they're logged in on
Auth0.  You can go to your application, get the URL from there, and simply paste
it in the settings.

05:22 We will also need to go all the way down to the =Advanced= settings.  This
is not an OIDC conformant application, so we can uncheck this.  We can change
our JWT signature to also use =HS256=.  We're good.  Just save this, and we can
head back to our code editor.

05:42 We need to tweak our settings just a little bit here.  Our domain is the
issuer of the token.  It's what is referred to as =tenant= in Auth0's website.  The
=clientID= is found in your settings.  This should be good.

05:54 In =responseType=, we won't need the =id_token=, so we can remove
this.  The =audience= is the API that we want to connect to.  Let's change this to
=egghead-demo=.  Finally, the scope is irrelevant in this case, so we can simply
remove this.

** Reference
*** RFC 7797
- https://tools.ietf.org/html/rfc7519

**** Abstract
JSON Web Token (JWT) is a compact, URL-safe means of representing /claims/ to
be transferred between two parties.  The /claims/ in a JWT are encoded as a
JSON object that is used as the /payload/ of a JSON Web Signature (JWS)
structure or as the plaintext of a JSON Web Encryption (JWE) structure,
enabling the claims to be digitally signed or integrity protected with a
Message Authentication Code (MAC) and/or encrypted.

- claims
- payload
- JSON Web Signature structure (JWS) [[https://www.rfc-editor.org/info/rfc7515][RFC 7515]]
- JSON Web Encryption structure (JWE) [[https://tools.ietf.org/html/rfc7516][RFC 7516]]
- digital signature
- integrity protected
- Message Authentication Code (MAC)
- Base64url Encoding

The terms "JSON Web Signature (JWS)", "Base64url Encoding", "Header Parameter",
"JOSE Header", "JWS Compact Serialization", "JWS Payload", "JWS Signature", and
"Unsecured JWS" are defined by the JWS specification:
- https://tools.ietf.org/html/rfc7519#ref-JWS

*JSON Web Signature (JWS)* represents content secured with digital signatures
or Message Authentication Codes (MACs) using JSON-based data structures.
Related encryption capabilities are described in the separate JSON Web
Encryption (JWE) specification.  The JWS cryptographic mechanisms provide
integrity protection for an arbitrary sequence of octets.
- https://www.rfc-editor.org/rfc/rfc7515.txt


*JSON Web Encryption (JWE)* represents encrypted content using JSON-based data
structures.  Cryptographic algorithms and identifiers for use with this
specification are described in the separate JSON Web Algorithms (JWA)
specification and IANA registries defined by that specification.  The JWE
cryptographic mechanisms encrypt and provide integrity protection for an
arbitrary sequence of octets.
- https://tools.ietf.org/html/rfc7516

Two closely related serializations for JWEs are defined.  The JWE Compact
Serialization is a compact, URL-safe representation intended for space
constrained environments such as HTTP Authorization headers and URI query
parameters.  The JWE JSON Serialization represents JWEs as JSON objects and
enables the same content to be encrypted to multiple parties.  Both share the
same cryptographic underpinnings.
- https://tools.ietf.org/html/rfc7516

**** Introduction
JSON Web Token (JWT) is a compact /claims representation format/ intended for
space constrained environments such as HTTP Authorization headers and URI query
parameters.

JWTs encode /claims/ to be transmitted as a JSON [RFC7159] object that is used
as the payload of a JSON Web Signature (JWS) [JWS] structure or as the
plaintext of a JSON Web Encryption (JWE) [JWE] structure, enabling the /claims/
to be digitally signed or integrity protected with a Message Authentication
Code (MAC) and/or encrypted.

 The suggested pronunciation of JWT is the same as the English word "jot".

**** Definitions

- JSON Web Token (JWT) ::

     A string representing a set of claims as a JSON object that is encoded in
     a JWS or JWE, enabling the claims to be digitally signed or MACed and/or
     encrypted.

- JSON Web Signature (JWS) ::

     A data structure representing a digitally signed or MACed message.

- JOSE Header ::

                 JSON object containing the parameters describing the
                 cryptographic operations and parameters employed.  The JOSE
                 (JSON Object Signing and Encryption) Header is comprised of a
                 set of Header Parameters.

- JWS Payload ::
                 The sequence of octets to be secured -- a.k.a. the message.
                 The payload can contain an arbitrary sequence of octets.

- JWS Signature ::

                   Digital signature or MAC over the JWS Protected Header and
                   the JWS Payload.

- Base64url Encoding ::

     Base64 encoding using the URL- and filename-safe character set defined in
     Section 5 of RFC 4648 [RFC4648], with all trailing '=' characters omitted
     (as permitted by Section 3.2) and without the inclusion of any line
     breaks, whitespace, or other additional characters.

- JSON Web Encryption (JWE) ::

     A data structure representing an encrypted and integrity-protected
     message.  JWE represents encrypted content using JSON data structures and
     base64url encoding.

- JWT Claims Set ::

                    A JSON object that contains the claims conveyed by the JWT.

- Claim ::

           A piece of information asserted about a subject.  A claim is
           represented as a name/value pair consisting of a Claim Name and a
           Claim Value.

- Claim Name ::

                The name portion of a claim representation.  A Claim Name is
                always a string.

- Claim Value ::

                 The value portion of a claim representation.  A Claim Value
                 can be any JSON value.

- Nested JWT ::

                A JWT in which nested signing and/or encryption are employed.
                In Nested JWTs, a JWT is used as the payload or plaintext value
                of an enclosing JWS or JWE structure, respectively.

- Unsecured JWT ::

                   A JWT whose claims are not integrity protected or encrypted.

- Collision-Resistant Name ::

     A name in a namespace that enables names to be allocated in a manner such
     that they are highly unlikely to collide with other names.

- StringOrURI ::

                 A JSON string value, with the additional requirement that
                 while arbitrary string values MAY be used, any value
                 containing a ":" character MUST be a URI [RFC3986].
                 StringOrURI values are compared as case-sensitive strings with
                 no transformations or canonicalizations applied.

- NumericDate ::

                 A JSON numeric value representing the number of seconds from
                 1970-01-01T00:00:00Z UTC until the specified UTC date/time,
                 ignoring leap seconds.  This is equivalent to the IEEE Std
                 1003.1, 2013 Edition [POSIX.1] definition "Seconds Since the
                 Epoch", in which each day is accounted for by exactly 86400
                 seconds, other than that non-integer values can be
                 represented.  See RFC 3339 [RFC3339] for details regarding
                 date/times in general and UTC in particular.

- MAC ::

         *Message Authentication Code* ("tag") is a short piece of information
         used to /authenticate/ a message---in other words, to confirm that the
         message came from the stated sender (its authenticity) and has not
         been changed.  The MAC value protects both a message's 
  - data integrity as well as its
  - authenticity,

  by allowing verifiers (who also possess the secret key) to detect any changes
          to the message content.

          Informally, a message authentication code consists of three
          algorithms:
    - A key generation algorithm selects a key from the key space uniformly at
      random.
    - A signing algorithm efficiently returns a tag given the key and the
      message.
    - A verifying algorithm efficiently verifies the authenticity of the
      message given the key and the tag.  That is, return /accepted/ when the
      message and tag are not tampered with or forged, and otherwise return
      /rejected/.

      MACs differ from digital signatures as MAC values are both generated and
      verified using the same secret key. This implies that the sender and
      receiver of a message must agree on the same key before initiating
      communications.  In contrast, a digital signature is generated using the
      private key of a key pair, which is public-key cryptography.  Since this
      private key is only accessible to its holder, a digital signature proves
      that a document was signed by none other than that holder.

- HMAC ::

          Hash-Based Message Authentication Code is a specific type of message
          authentication code (MAC) involving a cryptographic hash function and
          a secret cryptographic key.  Any cryptographic hash function, such as
          SHA-256 or SHA-3, may be used in the calculation of an HMAC; the
          resulting MAC algorithm is termed HMAC-X, where X is the hash
          function used (e.g. HMAC-SHA256 or HMAC-SHA3).

          HMAC uses two passes of hash computation. The secret key is first
          used to derive two keys – inner and outer. The first pass of the
          algorithm produces an internal hash derived from the message and the
          inner key. The second pass produces the final HMAC code derived from
          the inner hash result and the outer key.

**** Overview
JWTs represent a set of /claims/ as a JSON object that is encoded in a JWS
and/or JWE structure.  This JSON object is the JWT Claims Set.

As per Section 4 of RFC 7159 [RFC7159], the JSON object consists of zero or
more /name/value pairs/ (or /members/), where the names are strings and the
values are arbitrary JSON values.  These members are the /claims/ represented
by the JWT.

This JSON object MAY contain whitespace and/or line breaks before or after any
JSON values or structural characters, in accordance with Section 2 of RFC 7159
[RFC7159].

The member names within the JWT Claims Set are referred to as /Claim Names/.
The corresponding values are referred to as /Claim Values/.

The contents of the *JOSE Header* describe the cryptographic operations applied
to the JWT Claims Set.

If the JOSE Header is for a *JWS*, the JWT is represented as a JWS and the claims
are digitally signed or MACed, with the JWT Claims Set being the JWS Payload.

If the JOSE Header is for a *JWE*, the JWT is represented as a JWE and the
claims are encrypted, with the JWT Claims Set being the plaintext encrypted by
the JWE.

A JWT may be enclosed in another JWE or JWS structure to create a *Nested JWT*,
enabling nested signing and encryption to be performed.

A JWT is represented as a sequence of URL-safe parts separated by period ('.')
characters.  Each part contains a /base64url-encoded value/.  The number of parts
in the JWT is dependent upon the representation of the resulting JWS using the
JWS Compact Serialization or JWE using the JWE Compact Serialization.

**** Example JWT
The following example *JOSE Header* declares that:
- the encoded object is a *JWT*, and
- the JWT is a *JWS* that is *MAC*ed using the =HMAC SHA-256= algorithm:

#+begin_src js
  {"typ":"JWT",
   "alg":"HS256"}
#+end_src

To remove potential ambiguities in the representation of the JSON object above,
the /octet sequence/ for the actual UTF-8 representation used in this example for
the JOSE Header above is also included below.  The octets representing the
UTF-8 representation of the JOSE Header in this example (using JSON array
notation) are:

: [123, 34, 116, 121, 112, 34, 58, 34, 74, 87, 84, 34, 44, 13, 10, 32,
:  34, 97, 108, 103, 34, 58, 34, 72, 83, 50, 53, 54, 34, 125]

*Base64url* encoding the octets of the UTF-8 representation of the JOSE Header
yields this *encoded JOSE Header* value:

{{{subheading(Encoded JOSE Header Value)}}}

: eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9

The following is an example of a *JWT Claims Set*:

#+begin_src js
  {"iss":"joe",
   "exp":1300819380,
   "http://example.com/is_root":true}
#+end_src

The following octet sequence, which is the UTF-8 representation used in this
example for the JWT Claims Set above, is the JWS Payload:

#+begin_src js
  [123, 34, 105, 115, 115, 34, 58, 34, 106, 111, 101, 34, 44, 13, 10,
   32, 34, 101, 120, 112, 34, 58, 49, 51, 48, 48, 56, 49, 57, 51, 56,
   48, 44, 13, 10, 32, 34, 104, 116, 116, 112, 58, 47, 47, 101, 120, 97,
   109, 112, 108, 101, 46, 99, 111, 109, 47, 105, 115, 95, 114, 111,
   111, 116, 34, 58, 116, 114, 117, 101, 125]
#+end_src

*Base64url encoding* the *JWS Payload* yields this *encoded JWS Payload* (with
line breaks for display purposes only):

{{{subheading(Encoded JWS Payload)}}}

: eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly
: 9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ

Computing the *MAC*:
- of the encoded JOSE Header and
- encoded JWS Payload with the
- HMAC SHA-256 algorithm and
- base64url encoding the HMAC value
- in the manner specified in [JWS] yields
- this *encoded JWS Signature*:


{{{subheading(Encoded JWS Signature)}}}

: dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk

/Concatenating/ these encoded parts in this order with period ('.')  characters
between the parts yields this *complete JWT* (with line breaks for display
purposes only):

{{{subheading(Complete JWT)}}}

#+begin_src js
eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9
.
eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt
cGxlLmNvbS9pc19yb290Ijp0cnVlfQ
.
dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk
#+end_src

**** Example Encrypted JWT
This example encrypts the same claims as used in the previous example to the
recipient using =RSAES-PKCS1-v1_5= and =AES_128_CBC_HMAC_SHA_256=.

The following example JOSE Header declares that:
- The Content Encryption Key is encrypted to the recipient using the
  =RSAES-PKCS1-v1_5= algorithm to produce the JWE Encrypted Key.
- Authenticated encryption is performed on the plaintext using the
  =AES_128_CBC_HMAC_SHA_256= algorithm to produce the JWE Ciphertext and the
  JWE Authentication Tag.


: {"alg":"RSA1_5","enc":"A128CBC-HS256"}

Other than using the octets of the UTF-8 representation of the JWT Claims Set
from [[https://tools.ietf.org/html/rfc7519#section-3.1][Section 3.1]] as the plaintext value, the computation of this JWT is
identical to the computation of the JWE in [[https://tools.ietf.org/html/rfc7519#appendix-A.2][Appendix A.2]] of [[[https://tools.ietf.org/html/rfc7519#ref-JWE][JWE]]], including the
keys used.

The final result in this example (with line breaks for display purposes only)
is:

#+begin_example
eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.
QR1Owv2ug2WyPBnbQrRARTeEk9kDO2w8qDcjiHnSJflSdv1iNqhWXaKH4MqAkQtM
oNfABIPJaZm0HaA415sv3aeuBWnD8J-Ui7Ah6cWafs3ZwwFKDFUUsWHSK-IPKxLG
TkND09XyjORj_CHAgOPJ-Sd8ONQRnJvWn_hXV1BNMHzUjPyYwEsRhDhzjAD26ima
sOTsgruobpYGoQcXUwFDn7moXPRfDE8-NoQX7N7ZYMmpUDkR-Cx9obNGwJQ3nM52
YCitxoQVPzjbl7WBuB7AohdBoZOdZ24WlN1lVIeh8v1K4krB8xgKvRU8kgFrEn_a
1rZgN5TiysnmzTROF869lQ.
AxY8DCtDaGlsbGljb3RoZQ.
MKOle7UQrG6nSxTLX6Mqwt0orbHvAKeWnDYvpIAeZ72deHxz3roJDXQyhxx0wKaM
HDjUEOKIwrtkHthpqEanSBNYHZgmNOV7sln1Eu9g3J8.
fiK51VwhsxJ-siBMR-YFiA
#+end_example

**** Relationship of JWTs to SAML Assertions
Security Assertion Markup Language (SAML) 2.0 provides a standard for creating
security tokens with greater expressivity and more security options than
supported by JWTs.  However, the cost of this flexibility and expressiveness is
both size and complexity.  SAML's use of XML and XML Digital Signature (DSIG)
contributes to the size of SAML Assertions; its use of XML and especially XML
Canonicalization contributes to their complexity.

JWTs are intended to provide a simple security token format that is small
enough to fit into HTTP headers and query arguments in URIs.  It does this by
supporting a much simpler token model than SAML and using the JSON [RFC7159]
object encoding syntax.  It also supports securing tokens using Message
Authentication Codes (MACs) and digital signatures using a smaller (and less
flexible) format than XML DSIG.

Therefore, while JWTs can do some of the things SAML Assertions do, JWTs are
not intended as a full replacement for SAML Assertions, but rather as a token
format to be used when ease of implementation or compactness are
considerations.

SAML Assertions are always statements made by an entity about a subject.  JWTs
are often used in the same manner, with the entity making the statements being
represented by the "iss" (issuer) claim, and the subject being represented by
the "sub" (subject) claim.  However, with these claims being optional, other
uses of the JWT format are also permitted.

**** Relationship of JWTs to Simple Web Tokens (SWTs)
Both JWTs and SWTs [[[https://docs.microsoft.com/en-us/previous-versions/azure/azure-services/hh781551(v=azure.100)][SWT]]], at their core, enable sets of claims to be
communicated between applications.  For SWTs, both the claim names and claim
values are strings.  For JWTs, while claim names are strings, claim values can
be any JSON type.  Both token types offer cryptographic protection of their
content: SWTs with HMAC SHA-256 and JWTs with a choice of algorithms, including
signature, MAC, and encryption algorithms.

* MACs and HMACs

** Articles
*** [[https://www.jscape.com/blog/what-is-hmac-and-how-does-it-secure-file-transfers][What Is HMAC And How Does It Secure File Transfers?]]

  #+CINDEX:integrity
  #+CINDEX:authenticity
  #+CINDEX:HMAC
Data integrity checks are vital to secure communications.  They enable
communicating parties to verify the integrity and authenticity of the messages
they receive.  In secure file transfer protocols like FTPS, SFTP, and HTTPS,
data integrity/message authentication is usually achieved through a mechanism
known as HMAC.  In this post, we explain what HMAC is, its basic inner
workings, and how it secures data transfers.


*** [[https://www.jscape.com/blog/bid/84422/Symmetric-vs-Asymmetric-Encryption][Symmetric vs Asymmetric Encryption]]

Secure file transfer protocols generally employ a combination of symmetric and
asymmetric encryption to preserve the confidentiality of data while in
transit. So why the need for two kinds of encryption? In this post, we take a
closer look at the main functions of symmetric and asymmetric encryption, their
strengths, their weaknesses, and why we'd prefer having both.

**** Symmetric key encryption
Symmetric key encryption is a type of encryption that makes use of a single key
for both the encryption and decryption process. Some of the encryption
algorithms that use symmetric keys include: AES (Advanced Encryption Standard),
Blowfish, DES (Data Encryption Standard), Triple DES, Serpent, and Twofish.

If you want to apply symmetric key encryption to a file transfer environment,
both the sender and receiver should have a copy of the same key. The sender
will use his copy of the key for encrypting the file, while the receiver will
use his copy for decrypting it.

So if you manage a secure file transfer server that only supports symmetric
encryption and one of your users wants to encrypt a file first before uploading
it, one of you (either the user or you, the server admin) should first generate
a key and then send the other person a copy of that key.

**** Asymmetric key encryption
Asymmetric key encryption, on the other hand, makes use of two keys. A private
key and a public key. The public key is used for encrypting, while the private
key is used for decrypting. Two of the most widely used asymmetric key
algorithms are: RSA and DSA.

If you're going to use asymmetric key encryption in a file transfer
environment, the sender would need to hold the public key, while the receiver
would need to hold the corresponding private key.

So, going back to the scenario given in the previous section, if you manage a
file transfer server and one of your users wants to encrypt a file first before
uploading it, it would typically be your duty to generate the key pair. You
should then send the public key to your user and leave the private key on the
server.

**** Which is stronger?
Actually, it's difficult to compare the cryptographic strengths of symmetric
and asymmetric key encryptions. Even though asymmetric key lengths are
generally much longer (e.g. 1024 and 2048) than symmetric key lengths (e.g. 128
and 256), it doesn't, for example, necessarily follow that a file encrypted
with a 2048-bit RSA key (an asymmetric key) is already tougher to crack than a
file encrypted with a 256-bit AES key (a symmetric key).

Instead, it would be more appropriate to compare asymmetric and symmetric
encryptions on the basis of two properties:
- Their computational requirements, and
- Their ease of distribution


Symmetric key encryption doesn't require as many CPU cycles as asymmetric key
encryption, so you can say it's generally faster. Thus, when it comes to speed,
symmetric trumps asymmetric. However, symmetric keys have a major disadvantage
especially if you're going to use them for securing file transfers.

Because the same key has to be used for encryption and decryption, you will
need to find a way to get the key to your recipient if he doesn't have it
yet. Otherwise, your recipient won't be able to decrypt the files you send
him. However way you do it, it has to be done in a secure manner or else anyone
who gets a hold of that key can simply intercept your encrypted file and
decrypt it with the key.

The issue of key distribution becomes even more pronounced in a file transfer
environment, which can involve a large number of users and likely distributed
over a vast geographical area. Some users, most of whom you may never have met,
might even be located halfway around the world. Distributing a symmetric key in
a secure manner to each of these users would be nearly impossible.

Asymmetric key encryption doesn't have this problem. For as long as you keep
your private key secret, no one would be able to decrypt your encrypted
file. So you can easily distribute the corresponding public key without
worrying about who gets a hold of it (well, actually, there are spoofing
attacks on public keys but that's for another story). Anyone who holds a copy
of that public key can encrypt a file prior to uploading to your server. Then
once the file gets uploaded, you can decrypt it with your private key.

**** Getting the best of both worlds with hybrid cryptosystems
Because both symmetric and asymmetric key cryptography have their own
advantages, modern file transfer systems typically employ a hybrid of the
two. Some hybrid cryptosystems are:
- SSL (used in FTPS and HTTPS)
- SSH (used in SFTP)
- OpenPGP


Hybrid cryptosystems employed in an SFTP or FTPS server use asymmetric keys to
initially encrypt symmetric keys known as session keys. The session keys are
then the ones used to encrypt the actual data. As its name implies, a session
key is only used in one session. After the session, the key is simply
discarded. That's a good thing because even if a session key is compromised,
only data sent within that particular session will be at risk.

Here's a simplified outline of the steps taken by a typical hybrid cryptosystem
used in secure file transfer protocols like SFTP and FTPS.

1. File transfer server sends its public key to an end user's file transfer
   client.

2. Client generates a session key, encrypts a copy of the session key using the
   public key, and sends that copy to the server.

3. Server receives its copy of the session key and both of them use that
   session key to encrypt/decrypt files exchanged within that session.


[[file:./resources/hybrid_cryptosystem.png]]

**** Summary
File transfer systems normally use hybrid cryptosystems, i.e. a combination of
symmetric and asymmetric key encryption, to provide secure file
transfers. Symmetric keys facilitate faster file encryptions, while asymmetric
keys simplify the key distribution process.

* Listings
:PROPERTIES:
:unnumbered: t
:END:
#+texinfo:@listoffloats Listing

* Concept Index
:PROPERTIES:
:index:    cp
:unnumbered: t
:END:
* Export Settings                                                  :noexport:
** Options
#+options: H:4 ':t
** Texinfo Export Settings
#+texinfo_filename:security.info
#+texinfo_class: info
#+texinfo_header:
#+texinfo_post_header:
#+subauthor:
#+texinfo_dir_category:WebDev
#+texinfo_dir_title:Security
#+texinfo_dir_desc:Security information
#+texinfo_printed_title:Security Information
#+subtitle:For WebDev
** Macro Definitions
#+macro:heading @@texinfo:@heading $1@@
#+macro:subheading @@texinfo:@subheading $1@@
#+macro:dfn @@texinfo:@dfn{$1}@@
#+macro:noindent @@texinfo:@noindent @@
